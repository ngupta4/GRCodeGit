/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*   @input Basket : dw.order.Basket
*	@input Product : dw.catalog.Product
*   @input CurrentCampaignConfig : Object
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.system );
importPackage( dw.catalog );
importScript("naturaladvantage:common/libCampaingUpsell.ds");
function execute( args : PipelineDictionary ) : Number
{
	var basket : Basket = args.Basket;
	var product : Product = args.Product;
	var CCC : Object = args.CurrentCampaignConfig;
	var productList : Collection = basket.getProductLineItems(product.ID);
	var size = productList.size();
	if(productList.size()>0){
		return PIPELET_ERROR;
	}
	if("exclusive" in product.custom && product.custom.exclusive == true){
		updateBasketAccordingExclusiveProduct(basket,product);
	}
	
	return PIPELET_NEXT;
}

function updateBasketAccordingExclusiveProduct(basket : Basket ,product : Product){
	var exclusiveProducts : Collection = getExclusiveProductByBasket(basket);
	
	//get All recommendation that must be removed in Basket
	var exclusiveRecomendations : Collection = new LinkedHashSet();
	var exclusiveProductsIter : Iterator = exclusiveProducts.iterator();
	while(exclusiveProductsIter.hasNext()){
		getProductRecommendation(exclusiveProductsIter.next(), new Number(6), exclusiveRecomendations, false);
	}
	
	//get Recommendation that links with new product
	var productRecomendations : Collection = new LinkedHashSet();
	getProductRecommendation(product, new Number(6), productRecomendations, false);
	
	//exclude related upsells and add exclusive product
	exclusiveRecomendations.removeAll(productRecomendations);
	exclusiveRecomendations.addAll(exclusiveProducts);
	
	//Remove all 
	removeProductsFromBasket(basket, exclusiveRecomendations);
	
	//Save the base core offer that will be put back in cart
	savePutBackOfferIDToBasket(basket, exclusiveProducts.iterator());
}

function getExclusiveProductByBasket(basket : Basket){
	var exclusiveProducts : Collection = new LinkedHashSet();
	var productLIItr : Iterator = basket.getProductLineItems().iterator();
	while(productLIItr.hasNext()){
		var productLItem : ProductLineItem = productLIItr.next();
		var product : Product = productLItem.product;
		if("exclusive" in product.custom && product.custom.exclusive == true){
			exclusiveProducts.add(product);
		}
	}
	return exclusiveProducts;
}

function removeProductsFromBasket(basket : Basket, products : Collection){
	var productLIItr : Iterator = basket.getProductLineItems().iterator();
	while(productLIItr.hasNext()){
		var productLItem : ProductLineItem = productLIItr.next();
		var product : Product = productLItem.product;
		if(products.contains(product)){
			basket.removeProductLineItem(productLItem);
		}
	}
}

