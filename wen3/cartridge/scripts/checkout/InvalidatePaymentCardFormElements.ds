/**
 * Invalidates the payment card form element in case specified status is ERROR.
 * If status is undefined or form is invalid the pipelet returns PIPELET_ERROR. 
 *
 *  @input Basket : dw.order.Basket The basket.
 *  @input Status : dw.system.Status The status object.
 *	@input CustomerInfo : Object Customer Info from CustomerInfo MW Api call
 *  @input CreditCardForm : dw.web.FormGroup The credit card form.
 */
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.value );
importPackage( dw.web );

function execute( pdict : PipelineDictionary ) : Number
{
	var status : Status = pdict.Status;
	var creditCardForm : FormGroup = pdict.CreditCardForm;
	
	var basket : Basket = pdict.Basket;
	var authFailure : Boolean = false;
	var attrAuthFailurePresentInBasket : Boolean = !empty(basket) ? !empty(basket.describe().getCustomAttributeDefinition("authfailure")): false;
	if(attrAuthFailurePresentInBasket){
		authFailure = !empty(basket.custom.authfailure) ? basket.custom.authfailure : false;
	}
	// verify that we have a status object and a valid credit card form
	if( status == null || !creditCardForm.valid )
	{
		return PIPELET_ERROR;
	}
	
	
	var ccexpiration = creditCardForm.year.value+'-'+(String(creditCardForm.month.value).length>1?creditCardForm.month.value:'0'+creditCardForm.month.value);
	if(!empty(pdict.CustomerInfo) && !empty(session.privacy.ccexpiration) && session.privacy.ccexpiration != ccexpiration ){
				
		creditCardForm.month.invalidateFormElement(Resource.msg('creditcard.missmatcherror','forms',null));
		creditCardForm.year.invalidateFormElement();
		
		if(empty(session.privacy.ccdatemismatched) && session.privacy.wbShowCCinfo == true ){
			session.privacy.ccdatemismatched = true;
			return PIPELET_NEXT;
		}

	}


	// we are fine, if status is OK
	if( status.status == dw.system.Status.OK )
	{
		return PIPELET_NEXT;
	}

	// invalidate the payment card form elements
	var items : Iterator = status.items.iterator();
	while( items.hasNext() )
	{
		var item : StatusItem = items.next();
		
		switch( item.code )
		{
			case PaymentStatusCodes.CREDITCARD_INVALID_CARD_NUMBER:
				//if(attrAuthFailurePresentInBasket && authFailure && !items.hasNext()){
					//return PIPELET_NEXT;
				//}else{
					//basket.custom.authfailure = true;
				if(empty(creditCardForm.number.value) || empty(pdict.CustomerInfo) || ( pdict.CustomerInfo.creditcard.creditCardNumber != creditCardForm.number.value && !empty(creditCardForm.number.value))){
						creditCardForm.number.invalidateFormElement();
				}
				var s = session.privacy.wbShowCCinfo;
				var m = session.privacy.ccdatemismatched;
				if(session.privacy.ccdatemismatched == true ){
						session.privacy.wbShowCCinfo = false;
						delete session.privacy.ccdatemismatched;
						creditCardForm.number.invalidateFormElement(Resource.msg('creditcard.ccsecurityerror','forms',null));
						creditCardForm.clearFormElement();
				}
				//}
				continue;

			case PaymentStatusCodes.CREDITCARD_INVALID_EXPIRATION_DATE:
				creditCardForm.month.invalidateFormElement(Resource.msg('checkout.error.invalidccexpirationdate', 'rendering', null));
				creditCardForm.year.invalidateFormElement();
				continue;

			case PaymentStatusCodes.CREDITCARD_INVALID_SECURITY_CODE:
				creditCardForm.cvn.invalidateFormElement();
		}
	}

	return PIPELET_NEXT;
}