/**
* Demandware Script File
*
* @input Basket : dw.order.Basket The current Basket (which the order is created from)
* @input PaymentProcessor : dw.order.PaymentProcessor The needed payment processor.
* @input ReturnURL : dw.web.URL Return URL for PayPal
* @input CancelURL : dw.web.URL Cancel URL for PayPal
* @input RedirectURL : String, redirect url to PayPal
* @input PaypalOrigination : String Field to denote where the Paypal processing was originated.
* @input Locale : String Locale of the website CurrentRequest.httpLocale
* @input GetBillingAddrFromPP : Boolean Flag to get Billing address from PayPal
* @input PaymentAction : String PayPal payment action (Sale, Order)
* @input UserAgent : String httpUserAgent
* @input isInstantPayment: Boolean To distinguish retention customers for instant pay.
*
* @output Location : String The redirect location
* @output PaypalToken : String The returned token from Paypal
* @output Response : Object The Response
* @output Error : Object The Error object
* @output PaypalError : String If a Paypal call fails or doesn't return Success
* @output AvailFuncs  : dw.util.ArrayList
*
*/

importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.order );
importPackage( dw.rpc );

importScript("int_paypal:cart/Credentials.ds");
importScript("int_paypal:cart/WsUtil.ds");

/*
*/ 
function execute( pdict : PipelineDictionary ) : Number
{
	
	var billingAgreementDescription : String = (!empty(dw.system.Site.getCurrent().preferences.custom.PaypalDescription))?dw.system.Site.getCurrent().preferences.custom.PaypalDescription:"Proactiv products";

	var basket : Basket = pdict.Basket;
	var paymentProcessor : PaymentProcessor  = pdict.PaymentProcessor;

	if( basket == null ){
		return PIPELET_ERROR;
	}

	try{
		var paypalExpress : WebReference = webreferences.PayPalSvcDev;
		if (dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) {
			paypalExpress = webreferences.PayPalSvc;
		}
		
		var ppxService : Stub = paypalExpress.getService("PayPalAPIInterfaceService", "PayPalAPIAA");
		
		pdict.AvailFuncs = getAvailableFunctions(ppxService);
		
		// security header
		SetCredentials( paymentProcessor, ppxService );
		
		var paymentDetails = new paypalExpress.PaymentDetailsType();
		var currencyID = paypalExpress.CurrencyCodeType.fromString( basket.getCurrencyCode() );

		/* SetExpressCheckout */
		var paypalRequest = new paypalExpress.SetExpressCheckoutRequestType();
		paypalRequest.setVersion( "56.0" );
		var details = new paypalExpress.SetExpressCheckoutRequestDetailsType();

		// ReturnURL - The URL to which PayPal sends your customer after they log in to PayPal and select a payment method and shipping address. 
		details.returnURL = pdict.ReturnURL; //dw.web.URLUtils.httpsContinue();
		// CancelURL - The URL to which PayPal redirects your customer if the customer is unable to pay or decides not to use PayPal.
		// PayPal recommends that this value be the original page on which the customer chose to use PayPal. 
		details.cancelURL = pdict.CancelURL; //dw.web.URLUtils.http( 'Cart-Show' );
		
		//Set locale for PayPal login page (possible values: AU, DE, FR, IT, GB, ES, US
		details.localeCode = pdict.Locale; //"GB"; 
		
		var billingAgreement = new paypalExpress.BillingAgreementDetailsType();
		
		billingAgreement.billingType = paypalExpress.BillingCodeType.fromString("MerchantInitiatedBilling");
		billingAgreement.billingAgreementDescription = billingAgreementDescription;
		billingAgreement.billingAgreementCustom = ""; // Available for storage
		// cartid check added for retention customer for avoiding recurring payment.
		if(pdict.isInstantPayment)
		{
			billingAgreement.paymentType = paypalExpress.MerchantPullPaymentCodeType.InstantOnly;			  // Ignored for recurring transactions
		}
		
		var billingAgreements = [];
		billingAgreements.push(billingAgreement);
		
		details.billingAgreementDetails = billingAgreements;

		//Payment Action Authorization/Sale/Order
		details.setPaymentAction(paypalExpress.PaymentActionCodeType.Authorization);
		if (pdict.PaymentAction != null && pdict.PaymentAction == "Order") {
			details.setPaymentAction(paypalExpress.PaymentActionCodeType.Order);
		} else if (pdict.PaymentAction != null && pdict.PaymentAction == "Sale") {
			details.setPaymentAction(paypalExpress.PaymentActionCodeType.Sale);
		}
		

		//set merchant logo and colors for PayPal website
		details.setCppHeaderImage(dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalCppHeaderImage'));
		details.setCppHeaderBorderColor(dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalCppHeaderborderColor'));
		details.setCppHeaderBackColor(dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalCppHeaderbackColor'));
		details.setCppPayflowColor(dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalCppPayflowColor'));
		

		//setting option for getting billing address from PayPal
		if (pdict.GetBillingAddrFromPP){
			details.reqBillingAddress = "0";			
		}

		// Send Shipping Address override if process originated from Payment page 
		if (true || pdict.PaypalOrigination == "PaymentPage") {
			details.addressOverride = "1";
			details.noShipping = "1";
			var shippingAddress : OrderAddress = basket.defaultShipment.shippingAddress;
			
			if (shippingAddress == null) {
				var shippingAddressCollection : Collection = basket.shipments;
				for( var i = 0; i < shippingAddressCollection.size(); i++ ) {
					shippingAddress = shippingAddressCollection[i].shippingAddress;
				}
			}			
			
			var paypalShippingAddress = new paypalExpress.AddressType();
			
			paypalShippingAddress.setName(shippingAddress.fullName);
			paypalShippingAddress.setStreet1( shippingAddress.getAddress1() );
			paypalShippingAddress.setStreet2( shippingAddress.getAddress2() );
			paypalShippingAddress.setCityName( shippingAddress.getCity() );
			paypalShippingAddress.setStateOrProvince( shippingAddress.getStateCode() );
			if (shippingAddress.getCountryCode() != null && shippingAddress.getCountryCode().toString().length>0) {
				paypalShippingAddress.setCountry(paypalExpress.CountryCodeType.fromString( shippingAddress.getCountryCode() ));
			} else {
				paypalShippingAddress.setCountry(paypalExpress.CountryCodeType.US); //set default country code as US.
			}
			paypalShippingAddress.setPostalCode( shippingAddress.getPostalCode() );
			paypalShippingAddress.setPhone( shippingAddress.phone);

			details.setAddress(paypalShippingAddress);
		}
		

        // Sets the purchased items for this PaymentDetailsType.
        var items : Collection = basket.getAllProductLineItems();
        var itemType;
        var item : ProductLineItem;
        var anArray : Array = new Array();

        for( var i = 0; i < items.size(); i++ ) {
        	item = items[i];
        	itemType = new paypalExpress.PaymentDetailsItemType();

			// Sets the name value for this PaymentDetailsItemType.
        	itemType.setName( item.getProductName() );
			// Sets the number value for this PaymentDetailsItemType.
			itemType.setNumber( item.getProductID() );
 			// Sets the quantity value for this PaymentDetailsItemType.
			itemType.setQuantity( item.quantity.value );
			amount = new paypalExpress.BasicAmountType( item.basePrice );
        	amount.currencyID = currencyID;
   	    	itemType.setAmount( amount );
 
 			anArray.push( itemType );

			var adjustments : Collection = item.getPriceAdjustments();
			var adjust : PriceAdjustment = null;
			var lineItem : LineItem = null
			for each( adjust in adjustments ) {
				itemType = new paypalExpress.PaymentDetailsItemType();
				itemType.setName( 
					adjust.promotion == null ? "PriceAdjustment" : adjust.promotion.name );
				itemType.setQuantity( 1 );
				amount = new paypalExpress.BasicAmountType( adjust.netPrice.value );
				amount.currencyID = currencyID;
				itemType.setAmount( amount );
				anArray.push( itemType );
			}
 		}

		// Basket Price adjustments
		var basketAdjustments : Collection = basket.getPriceAdjustments();
		var basketAdjust : PriceAdjustment = null;
		for each( basketAdjust in basketAdjustments ) {
 			if (basketAdjust.netPrice.value != null) {
				itemType = new paypalExpress.PaymentDetailsItemType();
				itemType.setName("Basket Discount");
				itemType.setQuantity( 1 );
				amount = new paypalExpress.BasicAmountType( basketAdjust.netPrice.value );
				amount.currencyID = currencyID;
				itemType.setAmount( amount );
				anArray.push( itemType );
 			}
		}

		//set item srray in payment details
 		paymentDetails.setPaymentDetailsItem(anArray);
 		
 		//Set PayPal totals based on PayPal origination
 		
 		if (pdict.PaypalOrigination == "PaymentPage") {
 			
			// Sets the Tax value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getAdjustedShippingTotalNetPrice() );
			amount.currencyID = currencyID; 
	 		paymentDetails.setShippingTotal( amount );
	
			// Sets the Tax value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getTotalTax() );
			amount.currencyID = currencyID; 
	 		paymentDetails.setTaxTotal( amount );
	
			// Sets the itemTotal value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getAdjustedMerchandizeTotalNetPrice().getValue() );
			amount.currencyID = currencyID; 
	 		paymentDetails.setItemTotal( amount );
	
			// Sets the itemTotal value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getTotalGrossPrice().getValue() );
			amount.currencyID = currencyID; 
	 		paymentDetails.setOrderTotal( amount );
 		
 		} else {
 			
			// Sets the Tax value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getAdjustedShippingTotalNetPrice() );
			amount.currencyID = currencyID; 
	 		paymentDetails.setShippingTotal( amount );
	
			// Sets the Tax value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getTotalTax() ); //getTotalTax()
			amount.currencyID = currencyID; 
	 		paymentDetails.setTaxTotal( amount );
	
			// Sets the itemTotal value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getAdjustedMerchandizeTotalNetPrice().getValue() );
			amount.currencyID = currencyID; 
	 		paymentDetails.setItemTotal( amount );
	
			// Sets the itemTotal value for this PaymentDetailsType.
			if (basket.getTotalGrossPrice().getValue() == 0) {
				amount = new paypalExpress.BasicAmountType( basket.getAdjustedMerchandizeTotalPrice().getValue() ); //getTotalGrossPrice() getAdjustedMerchandizeTotalPrice() getAdjustedMerchandizeTotalGrossPrice()
				amount.currencyID = currencyID; 
		 		paymentDetails.setOrderTotal( amount );
			} else {
				amount = new paypalExpress.BasicAmountType( basket.getTotalGrossPrice().getValue() ); //getTotalGrossPrice() getAdjustedMerchandizeTotalGrossPrice()
				amount.currencyID = currencyID; 
		 		paymentDetails.setOrderTotal( amount );
			}
 		
 		}
 			
		

		//set payment details which has item details
		details.setPaymentDetails(paymentDetails);

		//set details in request
		paypalRequest.setSetExpressCheckoutRequestDetails( details );
		var req = new paypalExpress.SetExpressCheckoutReq();
		req.setSetExpressCheckoutRequest( paypalRequest );
		Logger.info('Request XML from Set Express Checkout:'+req);
		var response = ppxService.setExpressCheckout( req );
		Logger.info('Response XML from Set Express Checkout:'+response);
		if( response.getAck() != null && response.getAck().equals(paypalExpress.AckCodeType.Success) ) {
			var mytoken : String = response.token;
			pdict.PaypalToken = mytoken;
			
			var appendMobile =false;
			//detect is this is a mobile device:
			/*
			pdict.UserAgent
			*/
			
			if (!empty(pdict.UserAgent) && pdict.UserAgent.toLocaleLowerCase().indexOf('mobile')>-1)
			{
				appendMobile = true;
			}
			
			//useraction=commit
			
			var redirectURL = pdict.RedirectURL.toString();
			if (appendMobile)
			{
				redirectURL = redirectURL.replace('_express-checkout','_express-checkout-mobile');
				if (!empty(dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalMobilTransactionCommit')) && 
					dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalMobilTransactionCommit')){
						redirectURL = redirectURL+"&useraction=commit"
					}
			}
				
			pdict.Location = redirectURL + mytoken;

		} else {
			Logger.error('Ack  -- ' + response.getAck().toString() );
			Logger.error('Corelation ID  --' + response.correlationID );
			Logger.error('Error Message Short Message  -- ' + response.getErrors()[0].getShortMessage() );
			Logger.error('Error Message Long Message  -- ' + response.getErrors()[0].getLongMessage() );
			Logger.error('Error Message ErrorCode  -- ' + response.getErrors()[0].getErrorCode() );
			//pdict.PaypalError = response.getErrors()[0].getLongMessage() + " (" + response.getErrors()[0].getErrorCode() + ")";
			pdict.PaypalError = response.getErrors()[0].getLongMessage() + " (" + response.getErrors()[0].getErrorCode() + ")" + "-(" + response.correlationID + ")";
			Logger.error('Ack  -- ' + response.getAck().toString() + 'Corelation ID  --' + response.correlationID + 'Error Message Short Message  -- ' + response.getErrors()[0].getShortMessage() + 'Error Message Long Message  -- ' + response.getErrors()[0].getLongMessage() + 'Error Message ErrorCode  -- ' + response.getErrors()[0].getErrorCode());
			return PIPELET_ERROR;
		}
	}
	catch(e){
		if(e instanceof Fault){
		//	Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
			Logger.getRootLogger().fatal("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			//Logger.error(e.toString());
			Logger.getRootLogger().fatal(e.toString());
		}
		pdict.Error = e;
		pdict.PaypalError = e.message;
		return PIPELET_ERROR;
	}
	
	return PIPELET_NEXT;
}

