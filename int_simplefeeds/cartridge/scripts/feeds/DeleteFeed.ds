/**
 * Delete a remote file on a WebDAV or SFTP server.
 *
 * To delete or archive a local file see pipelet ArchiveFeed.
 *
 * @input RemoteFolderURL : String  mandatory, URL to WebDAV or SFTP folder, e.g. "https://www.myserver.com/folder/", "sftp://sftp.myserver.com:22/folder/"
 * @input RemoteFile : String  mandatory, file inside RemoteFolderURL, e.g. "feed.xml"
 * @input RemoteLogin : String  optional, login for Basic Authentication or Digest Autentication
 * @input RemotePassword : String  optional, password for Basic Authentication or Digest Autentication
 */

importPackage( dw.net );
importPackage( dw.system );

function execute( args : PipelineDictionary ) : Number
{
	// read parameters
	var remoteFolderURL : String = args.RemoteFolderURL;
	var remoteFile : String = args.RemoteFile;
 	var remoteLogin : String = args.RemoteLogin;
 	var remotePassword : String = args.RemotePassword;

    // check parameters
    if ( empty( remoteFolderURL ) )
    {
    	Logger.getLogger("simplefeeds").error( "DeleteFeed: Parameter RemoteFolderURL empty" );
    	return PIPELET_ERROR;
    }

    if ( empty( remoteFile ) )
    {
    	Logger.getLogger("simplefeeds").error( "DeleteFeed: Parameter RemoteFile empty" );
    	return PIPELET_ERROR;
    }

    Logger.getLogger("simplefeeds").debug( "DeleteFeed: " +
    	"RemoteFolderURL: " + remoteFolderURL + ", " +
    	"RemoteFile: " + remoteFile + ", " +
    	"RemoteLogin: " + ( !empty( remoteLogin ) ? remoteLogin : "(empty)" ) + ", " +
    	"RemotePassword: " + ( !empty( remotePassword ) ? "(provided)" : "(empty)" ) );

	var result : boolean;

	if ( remoteFolderURL.indexOf( "sftp://" ) == 0 )
	{
		result = deleteRemoteFileSFTP( remoteFolderURL, remoteFile, remoteLogin, remotePassword );
	}
	else
	{
		result = deleteRemoteFileWebDAV( remoteFolderURL, remoteFile, remoteLogin, remotePassword );
	}
	
	if ( !result )
	{
		return PIPELET_ERROR;
	}
	
	return PIPELET_NEXT;
}	

function deleteRemoteFileWebDAV( remoteFolderURL : String, remoteFile : String, remoteLogin : String, remotePassword : String ) : boolean
{	
	var webDAVClient : WebDAVClient;
	
	if ( !empty( remoteLogin ) && !empty( remotePassword ) )
	{
		// use authentication
		webDAVClient = new WebDAVClient( remoteFolderURL, remoteLogin, remotePassword );
	}
	else
	{
		// no authentication
		webDAVClient = new WebDAVClient( remoteFolderURL );
	}

	try
	{
		webDAVClient.del( remoteFile );
	}
	catch ( ex )
	{
		Logger.getLogger("simplefeeds").error( "DeleteFeed: Error while deleting " + remoteFolderURL + remoteFile + ": " + ex );		
		return false;
	}

	if ( !webDAVClient.succeeded() )
	{
		Logger.getLogger("simplefeeds").error( "DeleteFeed: Error while deleting " + remoteFolderURL + remoteFile + ": " +
			webDAVClient.statusCode + " " + webDAVClient.statusText );		
		return false;
	}
	
	webDAVClient.close();
	
    return true;
}

function deleteRemoteFileSFTP( remoteFolderURL : String, remoteFile : String, remoteLogin : String, remotePassword : String ) : boolean
{	
    // for SFTP remoteLogin and remotePassword are required
    if ( empty( remoteLogin ) )
    {
    	Logger.getLogger("simplefeeds").error( "DeleteFeed: Parameter RemoteLogin empty (required for SFTP)" );
    	return false;
    }

    if ( empty( remotePassword ) )
    {
    	Logger.getLogger("simplefeeds").error( "DeleteFeed: Parameter RemotePassword empty (required for SFTP)" );
    	return false;
    }

    // parse URL, e.g. "sftp://sftp.myserver.com:22/folder/"
	var params : Array = /^sftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( remoteFolderURL );

	if ( params == null || params.length != 4 )
	{
    	Logger.getLogger("simplefeeds").error( "DeleteFeed: Parameter RemoteFolderURL not recognized, RemoteFolderURL: " + remoteFolderURL );
    	return null;
	}

	var host : String = params[1];
	var port : Number = null;
	// params[2] is undefined if there was no port provided
	if ( params[2] != undefined )
	{
		port = new Number( params[2] );
	}
	var path : String = params[3];
	
	var sftpClient : SFTPClient = new SFTPClient();
	var result : boolean;
	
	try
	{
		if ( port != null )
		{
			result = sftpClient.connect( host, port, remoteLogin, remotePassword );
		}
		else
		{
			// use default port
			result = sftpClient.connect( host, remoteLogin, remotePassword );
		}
	}
	catch ( ex )
	{
		Logger.getLogger("simplefeeds").error( "DeleteFeed: Error while connecting to " +
			host + ( ( port != null ) ? ( ":" + port ) : "" ) + ": " + ex );		
		return false;
	}

	if ( !result )
	{
		Logger.getLogger("simplefeeds").error( "DeleteFeed: Error while connecting to " +
			host + ( ( port != null ) ? ( ":" + port ) : "" ) + ": " + sftpClient.errorMessage );		
		return false;
	}

	try
	{
		result = sftpClient.del( path + remoteFile );
	}
	catch ( ex )
	{
		Logger.getLogger("simplefeeds").error( "DeleteFeed: Error while deleting " + path + remoteFile + ": " + ex );		
		return false;
	}

	if ( !result )
	{
		Logger.getLogger("simplefeeds").error( "DeleteFeed: Error while deleting " + path + remoteFile + ": " + sftpClient.errorMessage );		
		return false;
	}
	
	sftpClient.disconnect();
	
    return true;
}
