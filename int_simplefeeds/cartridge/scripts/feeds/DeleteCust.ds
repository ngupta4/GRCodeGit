/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@input ExportFile : String
*   @output emailmap :  dw.util.HashMap
*   @output custNoList : dw.util.ArrayList
*   @output xmlWriter : dw.io.XMLStreamWriter
*   @output path : String 
*   @output Message : String
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.net );
importPackage( dw.crypto );
importPackage( dw.util );
importPackage( dw.io );
importPackage( dw.web );
importPackage( dw.system );

function execute( args : PipelineDictionary ) : Number
{ 
	
	//read file from ftp and write to impex 
	var ftpClient : SFTPClient = new SFTPClient();
	var host  : String = Site.getCurrent().getCustomPreferenceValue("DelCust_FTPHost"); //"sftp-stg.bazaarvoice.com";// 
    var user  : String =Site.getCurrent().getCustomPreferenceValue("DelCust_UserName"); //"guthyrenker";// 
    var pwd   : String =Site.getCurrent().getCustomPreferenceValue("DelCust_FTPPassword"); //"bus5aQ_f";// 
    var fpath : String = Site.getCurrent().getCustomPreferenceValue("DelCust_FTPExportPath"); //"/testimport";//
	var fname: String = Site.getCurrent().getCustomPreferenceValue('DeleteCust_FileName'); //deleteMember_
	try 
	{	
		if(!ftpClient.connect(host, user, pwd))
		{  args.Message = StringUtils.format(MESSAGE_TEMPLATE, "ERROR", "Error while trying to connect to FTP server for Delete customer file", host, user, pwd, fpath, fname);
		} 
		
		if( !ftpClient.cd(fpath))
		{	 ftpClient.disconnect();
	         args.Message = StringUtils.format(MESSAGE_TEMPLATE, "ERROR", "Error while accessing folder on FTP Server for Delete customer file", host, user, pwd, fpath, fname);
		}
	
	    var folderPathImpex = File.IMPEX + File.SEPARATOR + "src/customer";
	   	var zippedFileName : String =dw.system.Site.getCurrent().getCustomPreferenceValue('DeleteCust_FileName');
	   	
	    var currDate:Date = new Date();
        var tim:String= currDate.toISOString();
       // var timDate:String=tim.substr(0,19);        
        var timDate1:String=tim.substr(0,10);
        var dateArray : dw.util.ArrayList= timDate1.split("-");
        
	    var feedFilelist : dw.util.ArrayList =new dw.util.ArrayList(); 
	    var fileList: Array=ftpClient.list(fpath);
	        
	    for each(var file : dw.net.SFTPFileInfo in fileList)
	    {    var filename : String=file.name;
	    	if(filename.indexOf("Member_"+dateArray[0]+dateArray[1]+dateArray[2])>0)
	    	{ 	  		
	    		 feedFilelist.add(file);
	    	    
	    	}
	               
	    }     
	    
	    var itr: dw.util.Iterator= feedFilelist.iterator();
	    var latestFile : dw.net.SFTPFileInfo=null;
	    var count=0;
	      
	    
	    while (itr.hasNext())
	    {  var file: dw.net.SFTPFileInfo;
	    	
	    	if(count==0)
	    	{ latestFile = itr.next();
	    	} 
	    	else{
	    	 var file2: dw.net.SFTPFileInfo = itr.next();
	                   	        	
 	         var date1 : Date = latestFile.getModificationTime();
 	         var date2 : Date= file2.getModificationTime();
 	         if(date1<date2)  
 	         {  latestFile=file2;
 	          } 
 	        }
 	        count++;
	    } 	     
	    
	   
	    var zippedFile : File = new File( folderPathImpex + File.SEPARATOR + latestFile.getName());
	    fname =latestFile.getName();
	    
	    var gotRatingsFile: Boolean = ftpClient.getBinary(fname, zippedFile);
		ftpClient.disconnect();
	   
	   	  
	   	var fileReader : FileReader = new FileReader(zippedFile);
		var xmlreq : String = fileReader.getString();
		    
		var responseXML : XML = null;
		responseXML =new XML(xmlreq);
	
		var emailmap: dw.util.HashMap  = new dw.util.HashMap();
		//var emailList: dw.util.ArrayList  = new dw.util.ArrayList();
		    
		var ns: Namespace = new Namespace(responseXML.namespace());
	    for each(var userXML: XML in responseXML.ns::user) {   
	       	var emailId=userXML.ns ::email.toString();
	       	var mwid=userXML.ns ::mwid.toString();
	       	emailmap.put(emailId, mwid);
	     //  	emailList.add(emailId);
	     }	
	      
	  //   args.emailList=emailList;
	    args.emailmap=emailmap;
	      
	    var timDate:String = dw.util.StringUtils.formatDate(dw.util.DateUtils.nowForSite(), "yyyyMMdd");;
	    
		var folderPathImpex = File.IMPEX + File.SEPARATOR + "src/customer";
		var fname: String = "demandware_" + timDate + ".xml";
		var customerImpexXMLFile : File = new File( folderPathImpex + File.SEPARATOR + fname);
		var writer : FileWriter = new FileWriter(customerImpexXMLFile);
	   
	   var xmlWriter : XMLStreamWriter = new XMLStreamWriter(writer);
	   
	   xmlWriter.writeRaw('<?xml version="1.0" encoding="UTF-8"?>\n');
	   xmlWriter.writeRaw('<customers xmlns="http://www.demandware.com/xml/impex/customer/2006-10-31">\n');
	   
	   args.xmlWriter=xmlWriter;
	   
	   var filepath : String = "/customer"+  File.SEPARATOR + fname;
	   args.path=filepath;
   } catch (ex) {

        args.Message = StringUtils.format(MESSAGE_TEMPLATE, "ERROR", "Exception=" + ex.message, host, user, pwd, fpath, fname);
        return PIPELET_ERROR;
    }
   
    return PIPELET_NEXT;
}
