/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Basket : dw.order.Basket
*	@input ProductLineItem : dw.order.ProductLineItem
*   @input CurrentCampaignConfig : Object
*	@output Product : dw.catalog.Product
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.catalog );
importScript("common/libCampaingUpsell.ds");

function execute( args : PipelineDictionary ) : Number
{
	var basket : Basket = args.Basket;
	var productLI : ProductLineItem = args.ProductLineItem;
	var product : Product = productLI.product;
	var backProduct : Product = null;
	var CCC : Object = args.CurrentCampaignConfig;
	var coreOffer : Product =  getCoreOffer(CCC);
	//Removal of the core offer from the shopping cart will also remove all upsells.
	if("coreItem" in product.custom && product.custom.coreItem == true){
		var allProductLIList : Collection = new ArrayList();
		allProductLIList.addAll(basket.getAllProductLineItems());
		var allProductLIListIter : Iterator = allProductLIList.iterator();
		if(!empty(basket.describe().getCustomAttributeDefinition("upgradedOffer"))&& !empty(basket.custom.upgradedOffer)){
			backProduct = getPutBackOfferFromBasket(basket);
			if(!empty(backProduct)){
				basket.custom.upgradedOffer = "";
				var productRecomendations : Collection = new LinkedHashSet();
				getProductRecommendation(backProduct, new Number(6), productRecomendations, false);
				while(allProductLIListIter.hasNext()){
					var productLineItem : ProductLineItem = allProductLIListIter.next();
					if(!productRecomendations.contains(productLineItem.product)){
						basket.removeProductLineItem(productLineItem);
					}
				}
			}
		}else{
		 	while(allProductLIListIter.hasNext()){
				var productLineItem : ProductLineItem = allProductLIListIter.next();
				basket.removeProductLineItem(productLineItem);
			}
		}
		
	}else{
		basket.removeProductLineItem(productLI);
	}
	
	args.Product = backProduct;
	return PIPELET_NEXT;
}



