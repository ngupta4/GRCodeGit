/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
*   @input OrderNoDec : String mandatory
*   @input OrderNoPrefix : String mandatory
*   @input CountOfDigitsInOrderNo : Number mandatory
*   @output OrderNoHex : String
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.object );

function execute( args : PipelineDictionary ) : Number
{
	var orderNo : String = args.OrderNoDec;
	var orderNoHex : String = null;
	var orderNoPrefix : String = args.OrderNoPrefix;
	var countOfDigitsInOrderNo : Number = args.CountOfDigitsInOrderNo;
	var orderDigitsFormat : String = createOredrDigitsFormat(countOfDigitsInOrderNo);
	try{
		var orderNoDec : Number = new Number(orderNo);
		orderNoHex = orderNoDec.toString(16).toUpperCase();
		if(orderDigitsFormat!=null && orderNoHex.length <= countOfDigitsInOrderNo){
			orderNoHex = orderNoPrefix+orderDigitsFormat.substr(0, countOfDigitsInOrderNo - orderNoHex.length) + orderNoHex;
		}else{
			throw Error;
		}
	}catch(e){
		return PIPELET_ERROR;
	}
  	args.OrderNoHex = orderNoHex;
	
	return PIPELET_NEXT;
}

function createOredrDigitsFormat(countOfDigits : Number){
	var format : String = "";
	for(var i=1; i<=countOfDigits; i++){
		format +="0";
	}
	return format;
}
