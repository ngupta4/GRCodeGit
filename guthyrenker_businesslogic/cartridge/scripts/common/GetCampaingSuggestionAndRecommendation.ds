/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Basket : dw.order.Basket
*   @input CurrentCampaignConfig : Object
*	@input RecommendationType : Number
*	@input IsShowSuggest : Boolean
*	@input Cookies : dw.web.Cookies
*   @output Recommendations : dw.util.Collection
*   @output Suggestions : dw.util.Collection
*   @output ShowRecommendationPopup: Boolean
*
*/
importPackage( dw.system );
importPackage( dw.object );
importPackage( dw.catalog );
importPackage( dw.util );
importPackage( dw.order);
importPackage( dw.web);
importScript("common/libCampaingUpsell.ds");

function execute( args : PipelineDictionary ) : Number {
	var CCC : Object = args.CurrentCampaignConfig;
	var recommendationType : Number = args.RecommendationType;
	var isShowSuggest : Boolean = args.IsShowSuggest;
	var basket : Basket = args.Basket;
	if (empty(basket)) {
		return PIPELET_ERROR;
	}
		
	var upsellIDToSkip : Cookie = args.Cookies['upsellLastID'];
	var recommendationsSet : Collection = getAllRecommendationsForBasket(basket, recommendationType); //getAllRecommendation(CCC , recommendationType);
	var freeVitaminInCart:Boolean = false;
	// Remove all recommendation that present in Basket
	var productLIItr : Iterator = basket.getProductLineItems().iterator();
	while(productLIItr.hasNext()){
		var productLItem : ProductLineItem = productLIItr.next();
		if( recommendationType ==6){
			if( recommendationsSet.contains( productLItem.product)){
				freeVitaminInCart = true;
				recommendationsSet.clear();
			}
		}else{
			recommendationsSet.remove(productLItem.product);
		}
	}
	//recommendationsSet.removeAll(productLIList);
	
	var lastUpsell:Product = null;
	var upsellList:ArrayList = new ArrayList();
	if (upsellIDToSkip && recommendationsSet) {
		var found : Boolean = false;
		var upsellItemsToSkip : String = decodeURIComponent(upsellIDToSkip.value);
		var recommendationIterator : Iterator = new ArrayList(recommendationsSet).iterator();
		try {
			while (recommendationIterator.hasNext())
			{
				var upsellItem : Product = recommendationIterator.next();
				upsellList.add(upsellItem);
				lastUpsell = upsellItem;
				if (upsellItemsToSkip.indexOf("[" + upsellItem.ID + "]")  != -1)
				{
					recommendationsSet.remove(upsellItem);
				}
			}
		} catch (ex) {
			log.error('Error while skipping recomendation items: {0}', ex.message);
		}
	}
		if(recommendationsSet.empty && !empty(lastUpsell)){

			
			if(recommendationType == 6) {
				if( !freeVitaminInCart){
					var upIterator: Iterator = upsellList.iterator();
					while( upIterator.hasNext()){
						recommendationsSet.add(upIterator.next());
					}
					
				}
				args.ShowRecommendationPopup = false;
			}else{
				recommendationsSet.add(lastUpsell);
			}
			
		}
		else
		{
			if(recommendationType == 6) {
				args.ShowRecommendationPopup = true;
			}
		}
	if(!empty(isShowSuggest) && isShowSuggest == true && recommendationsSet.size()>0){
		var product : Product = recommendationsSet[0];
		recommendationsSet.remove(product);
		args.Suggestions = new ArrayList(product);
		args.Recommendations = recommendationsSet;
	}else{
		args.Suggestions = recommendationsSet;
		args.Recommendations = recommendationsSet;
	}
	return PIPELET_NEXT;
}
