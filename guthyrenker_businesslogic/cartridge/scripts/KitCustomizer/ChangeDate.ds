/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input weeks : Number
*   @input initialDate : Date
*   @output finalShipDate : Date
*   @output isNSDInPast : Boolean
*/
importPackage( dw.system );
importPackage( dw.util );

function execute( args : PipelineDictionary ) : Number
{
	var days : Number= args.weeks * 7;
	var date : Date;
	var newDate : Date;
	args.isNSDInPast = false;
	if(args.initialDate != null){
		date = new Date(args.initialDate);
		var currentDate : Date = new Date();
		var weekwithinDate : Date = new Date();
		//Set the date if it lies within upcoming week
		weekwithinDate.setDate(currentDate.getDate());
		//Set the temporary date from customer's profile last shippment date + Weeks *7
		var tempDate :Date= new Date(date);
		tempDate.setDate(date.getDate()+days);
		var weekwithinCalender : Calendar = new Calendar(weekwithinDate);
		var tempCalculatedCalender : Calendar = new Calendar(tempDate);
		var result = weekwithinCalender.compareTo(tempCalculatedCalender);
		if(result>0)
		{
			//current date is bigger than new calculated date/temp date then set the current date as the final output date
			newDate = new Date(calculateNextShipmentDate());
			args.isNSDInPast = true;
			//newDate = new Date(currentDate);
			//newDate.setDate(currentDate.getDate()+days);
		}else{
			//new date is bigger than new current date then set the temp date as final output date
			newDate = new Date(tempDate);
			
		}
	} else {
		//If the initial date is null then it's a ship now call. Calculate next shipment date according to next business day.
		newDate = new Date(calculateNextShipmentDate());
		//date = new Date();
		//newDate = new Date(date);
		//newDate.setDate(date.getDate()+days);
	}
	args.finalShipDate = newDate;
	return PIPELET_NEXT;
}


function calculateNextShipmentDate()
{
	var cDate: Date = new Date();
	var cDay : Number = cDate.getDay();
	var cHours: Number = cDate.getHours();
	var cMinutes: Number = cDate.getMinutes();
	var calculatedDate : Date;
	var tempDate = new Date();
	
	switch(cDay){
		case 1: //Monday
		case 2: //Tuesday
		case 3: //Wednesday
				calculatedDate = new Date(selectDate(cHours,cMinutes));
				break;
		case 4: //Thursday
				if((cHours==20 && cMinutes<=30) ||(cHours<20)){
					calculatedDate = new Date();
				}else{
					//For Thrursday delivery after 10:30 PM Sunday should be the delivery day
					calculatedDate = new Date(cDate.setDate(tempDate.getDate()+3));
				}
				break;
		case 5: //Friday
				calculatedDate = new Date(cDate.setDate(tempDate.getDate()+2));
				break;
		case 6: //Saturday
				calculatedDate = new Date(cDate.setDate(tempDate.getDate()+1));
				break;
		case 0: //Sunday
				if((cHours==16 && cMinutes<=30) ||(cHours<16)){
					calculatedDate = new Date();
				}else{
					//For Thrursday delivery after 10:30 PM Sunday should be the delivery day
					calculatedDate = new Date(cDate.setDate(tempDate.getDate()+1));
				}
				break;
	}
	
	return calculatedDate;
}

function selectDate(cHours : Number,cMinutes : Number){
	var tempDate : Date = new Date();
	var date : Date = new Date();
	if((cHours==20 && cMinutes>30) ||(cHours>20)){
		date.setDate(tempDate.getDate()+1);
	}
    return date;
}