/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input productList : dw.util.ArrayList
*   @input customerCode : String
*   @output kitPrice : Number
*   @input customer : dw.customer.Customer 
*   @output memberPrice : Number
*   @output youSave : Number
*   @output shipping : Number
*
*/
importPackage( dw.system );
importPackage( dw.object );
importPackage( dw.web );

function execute( args : PipelineDictionary ) : Number
{
   	var tempKitPrice : Number;// dummy value in place of actual logic.
	var memberKitPrice : Number = 0;
   	
   	var tempList : dw.util.ArrayList = new dw.util.ArrayList();
	tempList = args.productList;
	
	var countPA60 : Number = 0;
	var countPA90 : Number = 0;
	var countPAP90 : Number = 0;
	var shippingCost : Number = 0;
	var customerGroups = args.customer.customerGroups;
		for each(customerGroup in customerGroups){
			if(!empty(customerGroup.custom.DemandwareKitSegment) && customerGroup.custom.DemandwareKitSegment != null){
				var DWSegment : String = customerGroup.custom.DemandwareKitSegment;
				break;
			}	
			
		}
	
	var DWSegmentArray = DWSegment.split(",");
	
	var kitPriceSegment = DWSegmentArray[0];
	var shippingPriceSegment = DWSegmentArray[1];
	var sameObject : Boolean = false;
	if(kitPriceSegment == shippingPriceSegment){
		sameObject  = true;
	}
	for each(product in tempList.iterator()){
		var memberPrice = product.memberPrice;
		memberKitPrice += memberPrice;
		var productLine = product.productLine;
		//Count the number of products.
		if(productLine == null || empty(productLine)){
			productLine = Resource.msg('default.ProductLine','configuration',null);
		}
				
   		if(productLine == Resource.msg('productline_PAP90Day','configuration',null)){
   			countPAP90++;
   		}else if(productLine == Resource.msg('productline_PA90Day','configuration',null)){
   			countPA90++;
   		}else if(productLine == Resource.msg('productline_PA60Day','configuration',null)){
   			countPA60++;
   		}
	}
   	
   	//Kit Pricing Logic
   	var tempcustObjID : String = new String();
   	//the string pattern here should be like  - >  	SEG_A-Item-PA90_x_PA60_y_PA+90_z
   	tempcustObjID = "SEG_"+kitPriceSegment+"-Item-PA90_"+countPA90+"_PA60_"+countPA60+"_PA+90_"+countPAP90;
   	
   	var ShippingAndPricingObject : CustomObject = null;
	ShippingAndPricingObject = CustomObjectMgr.getCustomObject("KitPricingAndShipping", tempcustObjID);
   	
	tempKitPrice = ShippingAndPricingObject.custom.kitPriceValue;
	//If the kit price and shipping price are to be fetched from the same object, then do it here itself.
	if(sameObject){
		shippingCost = ShippingAndPricingObject.custom.kitShipValue;
	}
   	 
   	
   	//Shipping Pricing Logic
   	//If shipping price is to be calculated from a different object i.e. MPE, then the following logic is to be used.
   	
   	if(!sameObject){
	   	var ShippingPriceObject : CustomObject = null;
		var tempshippingID : String = new String();
		var completeshID : String = new String();
		tempshippingID = "SEG_"+shippingPriceSegment;
		var queryParameter : String = '*' + tempshippingID + '*';
		var customObjIter : Iterator = CustomObjectMgr.queryCustomObjects("KitPricingAndShipping", "custom.kitID ILIKE {0}", null, queryParameter);
		for each(custObject in customObjIter){
			completeshID = custObject.custom.kitID;
			break;
		}
		
		var priceLabel : String = "Price";
		var itemLabel : String = "Item";
		if(completeshID.indexOf(priceLabel) >= 0){
			var custObjectList : Iterator = CustomObjectMgr.queryCustomObjects("KitPricingAndShipping", "custom.kitID ILIKE {0}", null, queryParameter);
			var lowerLimit : Number = 0;
			var higherLimit : Number = 0;
			var completeshippingID : String = new String();
			var numbers;
			for each(custObjectship in custObjectList){
				completeshippingID = custObjectship.custom.kitID; 
				numbers = completeshippingID.match(/\d+\.?\d*/g);
				if(numbers[1] != null){
					if(numbers[0] >= numbers[1]){
						lowerLimit = numbers[1];
						higherLimit = numbers[0];
					}else{
						lowerLimit = numbers[0];
						higherLimit = numbers[1];
					}
				}else{
					lowerLimit = numbers[0];
				}
				
				if(numbers[1] != null){
					if(tempKitPrice >= lowerLimit && tempKitPrice <= higherLimit){
						shippingCost = custObjectship.custom.kitShipValue;
						break;
					}
				}else{
					if(tempKitPrice >= lowerLimit){
						shippingCost = custObjectship.custom.kitShipValue;
						break;
					}
				}
			}	
		}
   	}
	
	var tempYouSave : Number;
	
	args.kitPrice = tempKitPrice;
	tempYouSave =  memberKitPrice-tempKitPrice;
	args.memberPrice = memberKitPrice;
	if(tempYouSave < 0 ){
		tempYouSave = 0;	
	}
	args.youSave = tempYouSave;
	args.shipping = shippingCost;
   	return PIPELET_NEXT;
   	
}
