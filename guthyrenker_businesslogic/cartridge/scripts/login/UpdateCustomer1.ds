/**
*	@input currentCustomer:dw.customer.Customer
*	@input sourceXML:XML
*	@input webserviceSource:String
*	@output ccType : String
*	@output ccNumber : String
*	@output ccExpirationMonth : String
*	@output ccExpirationYear : String
*	@output sequenceNumber : String
*	@output customerPaymentMethod : Number
*/
importPackage( dw.system );
importPackage( dw.customer );
importPackage( dw.util );
importPackage( dw.web );
importPackage( dw.io );
importPackage( dw.order );
importScript( "account/Utils.ds" );

function execute( args : PipelineDictionary ) : Number
{

 // Code for updation of the Current Customer attributes with the data coming in the source xml
	
	// ------------------------------Profile attributes --------------------------
	var responseXMLData : XML = args.sourceXML.responseData;
	var getChildXMLData : XML;
	if(args.webserviceSource == "login" || args.webserviceSource == "registration")
	{
	 	getChildXMLData= responseXMLData.customer;
	}else if(args.webserviceSource == "vci"){
		getChildXMLData= responseXMLData.customer;		
		//Change the email ID If needed.
		if(args.currentCustomer.profile.email != getChildXMLData.profile.email)
		{
			args.currentCustomer.profile.email= getChildXMLData.profile.email;
			args.currentCustomer.profile.credentials.login= getChildXMLData.profile.email;			
		}
	}
	
	//Update the Membership Flag of a user
	if(null!=responseXMLData.login.member && responseXMLData.login.member=="true")
		args.currentCustomer.profile.custom.member = true;
	else
		args.currentCustomer.profile.custom.member = false;
		
	
	if(null!=getChildXMLData.profile.firstName && !empty(getChildXMLData.profile.firstName) && getChildXMLData.profile.firstName.stringValue!="")
	{
		args.currentCustomer.profile.firstName = getChildXMLData.profile.firstName;
	}
	if(null!=getChildXMLData.profile.lastName && !empty(getChildXMLData.profile.lastName) && getChildXMLData.profile.lastName.stringValue!="")
	{
		args.currentCustomer.profile.lastName = getChildXMLData.profile.lastName;
	}
	if(null!=getChildXMLData.profile.mwid && !empty(getChildXMLData.profile.mwid) && getChildXMLData.profile.mwid.stringValue!="")
	{
		args.currentCustomer.profile.custom.mwid = getChildXMLData.profile.mwid;
	}
	if(null!=getChildXMLData.profile.account && !empty(getChildXMLData.profile.account) && getChildXMLData.profile.account.stringValue!="")
	{
		args.currentCustomer.profile.custom.accountNumber = getChildXMLData.profile.account;
	}
	
	
	if('dayPhone' in getChildXMLData.profile.phones)
	{
		var dayPhone : String = getChildXMLData.profile.phones.dayPhone;
		var dayPhone1 : Array = dayPhone.split("-");
		dayPhone = dayPhone1[0]+dayPhone1[1]+dayPhone1[2];
		args.currentCustomer.profile.phoneHome = dayPhone;
	}
	
	if('eveningPhone' in getChildXMLData.profile.phones)
	{
		var eveningPhone : String = getChildXMLData.profile.phones.eveningPhone;
		var eveningPhone1 : Array = eveningPhone.split("-");
		eveningPhone = eveningPhone1[0]+eveningPhone1[1]+eveningPhone1[2];
		args.currentCustomer.profile.phoneBusiness =  eveningPhone;
	}
	
	/***********************************USER ATTRIBUTES*************************************/
	
	var userAttributes: ArrayList = getChildXMLData.profile.userAttributes;
	if(null!=getChildXMLData.profile.userAttributes && !empty(getChildXMLData.profile.userAttributes))
	{	
			for (var i=0;i<userAttributes.userAttribute.length();i++)
			{
				var field = userAttributes.userAttribute[i].fieldName;
				var value = userAttributes.userAttribute[i].fieldValue;
				if(field == "age")
				{
					args.currentCustomer.profile.custom.age = new Number (value);
				}	
				else if(field == "skinType")
				{
					args.currentCustomer.profile.custom.skinType = value;
				}
				else if (field == "severity")
				{
					args.currentCustomer.profile.custom.acneSeverity = value;
				}
				else if (field == "skinTone")
				{
					args.currentCustomer.profile.custom.skinTone = value;
				}
				else if (field == "gender")
				{
					if(value == "male")
						args.currentCustomer.profile.gender=1;
					else
						args.currentCustomer.profile.gender=2;
				}
			}	
	}
	
	
	/***********************************END OF USER ATTRIBUTES*******************/
	
	
	/*********************************FFC****************************************/
	if(null!=getChildXMLData.ffc.instantAccess && !empty(getChildXMLData.ffc.instantAccess))
	{
		args.currentCustomer.profile.custom.ffcOrderId = getChildXMLData.ffc.instantAccess.ffcOrderId;
		args.currentCustomer.profile.custom.ffcTransactionId = getChildXMLData.ffc.instantAccess.ffcTransactionId;
	}
	
	if(null!=getChildXMLData.ffc.customerStatus && !empty(getChildXMLData.ffc.customerStatus) && getChildXMLData.ffc.customerStatus.stringValue!="")
	{
		args.currentCustomer.profile.custom.customerStatus = getChildXMLData.ffc.customerStatus;
	}
	if(null!=getChildXMLData.ffc.customerSegment && !empty(getChildXMLData.ffc.customerSegment) && getChildXMLData.ffc.customerSegment.stringValue!="")
	{
		args.currentCustomer.profile.custom.customerSegment = getChildXMLData.ffc.customerSegment;
	}
	
	//-------------------------- Update Kit -------------------------------------
	if(empty(args.currentCustomer.profile.custom.isKitChanged)||null == args.currentCustomer.profile.custom.isKitChanged || args.currentCustomer.profile.custom.isKitChanged==false)
	{
			if(null!=getChildXMLData.ffc.continuityShipments.firstOrderDate && !empty(getChildXMLData.ffc.continuityShipments.firstOrderDate))
			{
				args.currentCustomer.profile.custom.firstOrderDate = new Date(getChildXMLData.ffc.continuityShipments.firstOrderDate);
			}
			if(null!=getChildXMLData.ffc.continuityShipments.maxKitSize && !empty(getChildXMLData.ffc.continuityShipments.maxKitSize))
			{
				args.currentCustomer.profile.custom.maxKitSize = new Number(getChildXMLData.ffc.continuityShipments.maxKitSize);
			}
			if(null!=getChildXMLData.ffc.continuityShipments.nextShipment[0])
			{
					args.currentCustomer.profile.custom.kitName = getChildXMLData.ffc.continuityShipments.nextShipment[0].kitName;
					args.currentCustomer.profile.custom.shipdate = new Date(getChildXMLData.ffc.continuityShipments.nextShipment[0].shipDate); 
					args.currentCustomer.profile.custom.kitStatus = getChildXMLData.ffc.continuityShipments.nextShipment[0].status;
		 			var kitProducts:Array = new Array();
					var products: ArrayList = getChildXMLData.ffc.continuityShipments.nextShipment.products;
					var count : Number = 0;	
					for (var i=0;i<products.product.length();i++)
					{
						var productNum = products.product[i].productNum;
						var productTitle = products.product[i].title;
						var productQuantity : Number = new Number(products.product[i].quantity);
						for(var j=0;j<productQuantity;j++)
						{
							var kitEntry :String = productNum +Resource.msg('symbol.kit.split', 'common', null)+ productTitle +Resource.msg('symbol.kit.split', 'common', null)+ count;
							kitProducts[count]=kitEntry;
							count++;
						}
					  
					}
					args.currentCustomer.profile.custom.kitProducts = kitProducts;
					
				args.currentCustomer.profile.custom.weeksBetweenShipments = Number(getChildXMLData.ffc.continuityShipments.weeksBetweenShipments);
			}
	}
	//--------------------------End Update Kit -------------------------------------
	
	
	//-------------------------- Address Book -------------------------------------	
	    var addressXML : XML = getChildXMLData.ffc.addresses.children();
        var addressStr : String = addressXML.toString();
        if(addressStr!=null && !empty(addressStr) && addressStr!="")
        {
				var addressBook : AddressBook = args.currentCustomer.profile.addressBook;
				
				/*Remove Continuity Shipping and Billing address checks, before*/
				var address : CustomerAddress = null;
				for each(address in addressBook.addresses)
				{
					if(address.custom.shippingAddress == true){
						address.custom.shippingAddress = false;
					}
					if(address.custom.billingAddress == true){
						address.custom.billingAddress = false;
					}
				}
				
				/*Add New Shipping and Billing address checks*/
				var isExistingBillingAddress : String = determineIfExistingAddress(getChildXMLData.ffc.addresses.billingAddress,addressBook);
				if(isExistingBillingAddress != null)
				{
					address= addressBook.getAddress(isExistingBillingAddress);
					address.custom.billingAddress= true;
					args.currentCustomer.profile.custom.billingAddressID=isExistingBillingAddress;
					/*If the shipping address is same as billing address then update it's shipping address flag too and skip making a new address of shipping address*/
					if(getChildXMLData.ffc.addresses.shippingSameAsBilling=="true"){
						address.custom.shippingAddress= true;
						args.currentCustomer.profile.custom.shippingAddressID=isExistingBillingAddress;
					}				
				}else{
					var newAddressID : String = determineUniqueAddressID(getChildXMLData.ffc.addresses.billingAddress.city,addressBook); 
					address=addressBook.createAddress(newAddressID);
					address.setFirstName( getChildXMLData.ffc.addresses.billingAddress.firstName);
					address.setLastName( getChildXMLData.ffc.addresses.billingAddress.lastName);
					address.setAddress1( getChildXMLData.ffc.addresses.billingAddress.address[0]);
					address.setAddress2( getChildXMLData.ffc.addresses.billingAddress.address[1]);
					address.setCity(getChildXMLData.ffc.addresses.billingAddress.city);
					address.setStateCode(getChildXMLData.ffc.addresses.billingAddress.state);
					address.setPostalCode(getChildXMLData.ffc.addresses.billingAddress.postalCode);
					args.currentCustomer.profile.custom.billingZipCode=getChildXMLData.ffc.addresses.billingAddress.postalCode.toString();
					address.setCountryCode(getChildXMLData.ffc.addresses.billingAddress.countryCode);
					
					if('dayPhone' in getChildXMLData.ffc.addresses.shippingAddress.phones)
					{
						var dayPhone : String = getChildXMLData.ffc.addresses.billingAddress.phones.dayPhone;
						var dayPhone1 : Array = dayPhone.split("-");
						dayPhone = dayPhone1[0]+dayPhone1[1]+dayPhone1[2];
						address.setPhone(dayPhone);
					}
					if('eveningPhone' in getChildXMLData.ffc.addresses.billingAddress.phones)
					{
						var eveningPhone : String = getChildXMLData.ffc.addresses.billingAddress.phones.eveningPhone;
						var eveningPhone1 : Array = eveningPhone.split("-");
						eveningPhone = eveningPhone1[0]+eveningPhone1[1]+eveningPhone1[2];
						address.custom.eveningPhone = eveningPhone;
					}
					address.custom.billingAddress= true;
					args.currentCustomer.profile.custom.billingAddressID=newAddressID;
					if(getChildXMLData.ffc.addresses.shippingSameAsBilling=="true"){
						address.custom.shippingAddress= true;
						args.currentCustomer.profile.custom.shippingAddressID=newAddressID;
					}
				}
				
				/*if Billing is same as shipping address then donot create a new address*/
				if(getChildXMLData.ffc.addresses.shippingSameAsBilling!="true"){
					var isExistingShippingAddress : String = determineIfExistingAddress(getChildXMLData.ffc.addresses.shippingAddress,addressBook);
					
					if(isExistingShippingAddress != null)
					{
						address= addressBook.getAddress(isExistingShippingAddress);
						address.custom.shippingAddress= true;
						args.currentCustomer.profile.custom.shippingAddressID=isExistingShippingAddress;						
					}
					else{
						var newAddressID : String = determineUniqueAddressID(getChildXMLData.ffc.addresses.shippingAddress.city,addressBook); 
						address=addressBook.createAddress(newAddressID);
						address.setFirstName( getChildXMLData.ffc.addresses.shippingAddress.firstName);
						address.setLastName( getChildXMLData.ffc.addresses.shippingAddress.lastName);
						address.setAddress1( getChildXMLData.ffc.addresses.shippingAddress.address[0]);
						address.setAddress2( getChildXMLData.ffc.addresses.shippingAddress.address[1]);
						address.setCountryCode(getChildXMLData.ffc.addresses.shippingAddress.countryCode);
						address.setStateCode(getChildXMLData.ffc.addresses.shippingAddress.stateCode);
						address.setCity(getChildXMLData.ffc.addresses.shippingAddress.city);
						address.setPostalCode(getChildXMLData.ffc.addresses.shippingAddress.postalCode);
						
						if('dayPhone' in getChildXMLData.ffc.addresses.shippingAddress.phones)
						{
						var dayPhone : String = getChildXMLData.ffc.addresses.shippingAddress.phones.dayPhone;
						var dayPhone1 : Array = dayPhone.split("-");
						dayPhone = dayPhone1[0]+dayPhone1[1]+dayPhone1[2];
						address.setPhone(dayPhone);
						}
						
						if('eveningPhone' in getChildXMLData.ffc.addresses.shippingAddress.phones)
						{
							var eveningPhone : String = getChildXMLData.ffc.addresses.billingAddress.phones.eveningPhone;
							var eveningPhone1 : Array = eveningPhone.split("-");
							eveningPhone = eveningPhone1[0]+eveningPhone1[1]+eveningPhone1[2];
							address.custom.eveningPhone = eveningPhone;
						}

						address.custom.shippingAddress= true;
						args.currentCustomer.profile.custom.shippingAddressID=newAddressID;
					}
				}
				
				/*Update the flag of shipping same as billing address*/
				if(getChildXMLData.ffc.addresses.shippingSameAsBilling=="true")
					args.currentCustomer.profile.custom.shippingSameAsBilling = true;
				else
					args.currentCustomer.profile.custom.shippingSameAsBilling = false;					
        }//End of outer If
        
		/*----------------START OF UPDATING PAYMENT METHODS---------------*/
		if('paypal' in getChildXMLData.ffc.payment)
		{
				args.customerPaymentMethod = 1;
		}else{
			
				if(null!=getChildXMLData.ffc.payment.creditCard.cardType && !empty(getChildXMLData.ffc.payment.creditCard.cardType) && getChildXMLData.ffc.payment.creditCard.cardType.stringValue!="")
				{
					args.ccType = new String(getChildXMLData.ffc.payment.creditCard.cardType);
				}
				if(null!=getChildXMLData.ffc.payment.creditCard.ccLastFour && !empty(getChildXMLData.ffc.payment.creditCard.ccLastFour))
				{
					args.ccNumber= new String (getChildXMLData.ffc.payment.creditCard.ccLastFour);
				}
				if(null!=getChildXMLData.ffc.payment.creditCard.expMonth && !empty(getChildXMLData.ffc.payment.creditCard.expMonth))
				{
					args.ccExpirationMonth=new String (getChildXMLData.ffc.payment.creditCard.expMonth);
				}
				if(null!=getChildXMLData.ffc.payment.creditCard.expYear && !empty(getChildXMLData.ffc.payment.creditCard.expYear))
				{
					args.ccExpirationYear=new String (getChildXMLData.ffc.payment.creditCard.expYear);
				}
				if(null!=getChildXMLData.ffc.payment.creditCard.sequenceNumber && !empty(getChildXMLData.ffc.payment.creditCard.sequenceNumber))
				{
					args.sequenceNumber = new String (getChildXMLData.ffc.payment.creditCard.sequenceNumber);
				}		
			args.customerPaymentMethod = 0;
		}
		
	return PIPELET_NEXT;    
    
}

