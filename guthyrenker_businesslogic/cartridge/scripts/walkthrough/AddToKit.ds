/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*    @input productString : String
*    @input pids : Array
*    @output response : String
*    @output productIter : Array
*
*/
importPackage( dw.system );
importPackage( dw.catalog );

function execute( args : PipelineDictionary ) : Number
{	
	var responseJson = '';
	//var customer:dw.customer.Customer=args.currentCustomer;
	//var kitMaxLimit = customer.profile.custom.maxKitSize;
	/*if(args.productString!= null){
		if(args.productString.indexOf(dw.web.Resource.msg('symbol.comma','common',null))==-1)
			if (customer.profile.custom.kitProducts.length == kitMaxLimit) {
		       responseJson = '"Error":"Required parameter missing."';
		       args.response = JSON.stringify(JSON.parse("[{"+responseJson+"}]")); 
		       return PIPELET_ERROR;
		    }
		}
		else{
			var prodArray = args.productString.split(dw.web.Resource.msg('symbol.comma','common',null));	
	      	var length = prodArray.length;
	      	var spaceAvailable : Number = kitMaxLimit-customer.profile.custom.kitProducts.length;
	      	
	      	if(length>=spaceAvailable){
	      	
	      	}
		 }*/
	 
    if (args.productString==null ) {
       responseJson = '"Error":"Required parameter missing."';
       args.response = JSON.stringify(JSON.parse("[{"+responseJson+"}]")); 
       return PIPELET_ERROR;
    }
    else{
    	var productArray:Array = new Array();
      	if(args.productString.indexOf(dw.web.Resource.msg('symbol.comma','common',null))!=-1){
	      	productArray = args.productString.split(dw.web.Resource.msg('symbol.comma','common',null));
	        args.productIter = productArray;
      	}else{
      		productArray[0]=args.productString;
      		args.productIter = productArray;
      	}
      	
    }
	    
   /* else{     	
      	var productArray:Array = new Array();
      	if(args.productString.indexOf(dw.web.Resource.msg('symbol.comma','common',null))!=-1){
	      	productArray = args.productString.split(dw.web.Resource.msg('symbol.comma','common',null));
	      	for(var j=0; j<productArray.length; j++){
	      		for(var i=0; i<args.pids.length; i++){
	    			if(productArray[j] == args.pids[i]){
	    			    responseJson = '"Error":"Duplicate items are passed."';
			            args.response = JSON.stringify(JSON.parse("[{"+responseJson+"}]")); 
			            return PIPELET_ERROR;	
	    			}
    			}
	      	}	
	      	args.productIter = productArray;
    	} else {
    		for(var i=0; i<args.pids.length; i++){
    			if(args.productString == args.pids[i]){
    			   responseJson = '"Error":"Duplicate items are passed."';
			       args.response = JSON.stringify(JSON.parse("[{"+responseJson+"}]")); 
			       return PIPELET_ERROR;
    			}
    		}
    		
    	}
    	
    }	*/
	
    return PIPELET_NEXT;
}
