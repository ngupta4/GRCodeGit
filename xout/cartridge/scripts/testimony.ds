/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
*
*   @input CurrentHttpParameterMap : dw.web.HttpParameterMap Http Parameter Map
*	@input CurrentFroms : dw.web.Forms Forms
*	@output Testimony : dw.object.CustomObject New Testimony Object
*	@output Error : String Error string with explanations of file upload error
*
*/
importPackage( dw.system );
importPackage( dw.web );
importPackage( dw.io );
importPackage( dw.util );
importPackage( dw.object );

var check :  Boolean = false;
var checkStatus : Boolean = false;

Logger.debug("inside testimony.ds, step1");
var FilePath = File.LIBRARIES+File.SEPARATOR+Site.getCurrent().name+'/default/images/testimonials/';
Logger.debug("filepath = " + FilePath); 

var TestimonyDir : File = new File(FilePath);
if(!TestimonyDir.exists()){
	TestimonyDir.mkdir();

Logger.debug("creating new dir");
}
var TempPath = File.TEMP+'/';
var MEGABYTE = 1000000;

function execute( pdict : PipelineDictionary ) : Number
{
	var filename : String;
	var	params : HttpParameterMap = pdict.CurrentHttpParameterMap;
	var	files : LinkedHashMap = new LinkedHashMap();
	var	testimonyForm : Form = pdict.CurrentFroms.testimonials;
	var	testimonyObject : CustomObject = null;
	var	filesBeforeCount = 0;
	
	var	fileUploadHandler : Object = function(field: String, ct: String, oname: String){
			
			var file : dw.io.File = null;
			//we must check if other fields are valid
			if(oname){
				
				if(checkFormFields(params, testimonyForm) && ct.match(/gif|jpe?g/) && checkFileExistsInForm(field,testimonyForm)){
					try{
						file = new File(TempPath+oname);
					}catch(e){
						Logger.getRootLogger().error("Can't upload file {0}",e);
					}
				}
			}
			return file;
		};
		
		//The keys are the field names and the values are references to the file
		files = params.processMultipart(fileUploadHandler);
		
		if(checkFormFields(params, testimonyForm) && files){

			for each(var fKey : String in files.keySet()){
				var file : File = files.get(fKey);
				if(file.length() <= 0 || file.length() > MEGABYTE){
					file.remove();
					files.remove(fKey);
					pdict.Error = Resource.msg('testimony.fileupload.sizeerror', 'rendering', null);
					
					return PIPELET_ERROR;
				}else if(/_before[1-3]/.test(fKey)){
					filesBeforeCount++;
				}
			}
			if(filesBeforeCount){
				testimonyObject = createTestimony(testimonyForm, files);
				if(testimonyObject){
					pdict.Testimony = testimonyObject;
					return PIPELET_NEXT;
				}
			}else{
				//invalidate file fields "before" field is not valid
				//show error on upload field
				pdict.Error = Resource.msg('testimony.fileupload.error','rendering',null);				
			}
		}
		
		return PIPELET_ERROR;
}

function checkFormFields(params: HttpParameterMap, testimony : Form){
	if(!check){		
		parseParams(params, testimony);
		check = true;
		//check mail and confirm mail equil and if form is valid
		if(testimony.email.value === testimony.retypeemail.value && testimony.isValid()){
			checkStatus = true;
			return true;
		}
	}
	return checkStatus;
}

function checkFileExistsInForm(filename : String, testimonyForm : FormGroup){
	for each(var testimony : FormElement in testimonyForm){
		if(filename == testimony.htmlName){
			return true;
		}		
	}
	return false;
}

function parseParams(params: HttpParameterMap, group : FormGroup){
	var	field : FormElement,
		param : HttpParameter;
		
	for each(field in group){
		 if(field instanceof FormField ){
			try{
				if((param = params[field.htmlName]) && param.value){
					field.setHtmlValue(param.value);
				}
			}catch(e){
				Logger.getRootLogger().error("Can't populate value {0}",e);
			}
		}
		if(field instanceof FormGroup){
			parseParams(field, params);
		}
	}
}

function createTestimony(testimonyFrom : Form, files : LinkedHashMap) : CustomObject {
	var testimony : CustomObject = null;
	
	var UUID = UUIDUtils.createUUID();
	var uploadedFileObjectDir : File = new File(FilePath+UUID);
	uploadedFileObjectDir.mkdirs();
	try{
				
		testimony = CustomObjectMgr.createCustomObject('Testimony',UUID);
		testimonyFrom.copyTo(testimony.getCustom());

		 
		for each(var fileFormName : String in files.keySet()){			
			var m = fileFormName.match(/_(before|after)[1-3]/);
			var property = m && m[0].substring(1);
			var uploadedTempFile : File =  files.get(fileFormName);
			
			var uploadedFile : File = new File(uploadedFileObjectDir.getFullPath()+File.SEPARATOR+property+'_'+uploadedTempFile.name);

			//if property does not exists - it is not valid file
			if(property && uploadedTempFile){
				if(!uploadedTempFile.renameTo(uploadedFile)){
					throw new Error('Can\'t move file from TEMP to Library');
				}
				testimony.custom[property] = uploadedFile.name;
			}else{
				uploadedTempFile.remove();
			}
		}
		return testimony;
	}catch(e){
		if(testimony != null){
			if(uploadedFileObjectDir.exists()){
				uploadedFileObjectDir.remove();
			}
			CustomObjectMgr.remove(testimony);
		}
	}
	return null;
}