/**
 * Creates a credit card payment instrument from the given credit card form
 * for the given basket. If any error occurs the pipelet returns PIPELET_ERROR with
 * no payment instrument being created. If the creation succeeded the script returns 
 * the newly created payment instrument.
 *
 * Only single credit card payments are allowed. Therefore any existing credit card
 * is removed from the basket once the new credit card payment was successfully created. 
 *
 *  @input Basket : dw.order.Basket The basket.
 *  @input map : dw.web.HttpParameterMap The credit card info.
 * @input session : dw.system.Session
 *  @output PaymentInstrument : dw.order.PaymentInstrument The created payment instrument.
 */
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.value );
importPackage( dw.web );

importScript("mobile/checkout/Utils.ds");

function execute( pdict : PipelineDictionary ) : Number
{
    var basket : Basket = pdict.Basket;
	//var creditCardForm : FormGroup = pdict.CreditCardForm;
	var map = pdict.map;
	var session = pdict.session;

	// verify that we have a basket and a valid credit card form
	if( basket == null )
	{
		return PIPELET_ERROR;
	}
	
	//remove all whitespaces from the number
	var card_number : String = map.cc_number.value;
	card_number = card_number.split(' ').join('');
		
	
	var month = Number(map.cc_month.value);
	var year = Number(map.cc_year.value);

	// remove existing credit cards from the basket
	removeExistingCreditCards( basket );

	// calculate the amount to be charged for the credit card
	var amount = calculateNonGiftCertificateAmount( basket );

	// create a payment instrument for this credit card
	var paymentInstr : PaymentInstrument = basket.createPaymentInstrument( PaymentInstrument.METHOD_CREDIT_CARD, amount );

	// copy the credit card details to the payment instrument
	paymentInstr.setCreditCardHolder( map.cc_owner.value );
	paymentInstr.setCreditCardNumber(card_number );
	paymentInstr.setCreditCardType( map.cc_type.value );
	paymentInstr.setCreditCardExpirationMonth(month);
	paymentInstr.setCreditCardExpirationYear(year);
	
	//save the cvn in a private place
	session.privacy.cvn = map.cc_cvn.value;

	pdict.PaymentInstrument = paymentInstr;
    return PIPELET_NEXT;
}

/** 
 * Determines if the basket already contains a credit card payment 
 * instrument and removes it from the basket.
 */
function removeExistingCreditCards( basket : Basket )
{
	// get all credit card payment instruments
	var ccPaymentInstrs : Collection = basket.getPaymentInstruments( PaymentInstrument.METHOD_CREDIT_CARD );
	var iter : Iterator = ccPaymentInstrs.iterator();
	var existingPI : OrderPaymentInstrument = null;

	// remove them
	while( iter.hasNext() )
	{
		existingPI = iter.next();
		basket.removePaymentInstrument( existingPI );
	}
}