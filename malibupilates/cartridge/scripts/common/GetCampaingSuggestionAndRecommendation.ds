/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Basket : dw.order.Basket
*   @input CurrentCampaignConfig : Object
*	@input RecommendationType : Number
*	@input IsShowSuggest : Boolean
*   @output Recommendations : dw.util.Collection
*   @output Suggestions : dw.util.Collection
*
*/
importPackage( dw.system );
importPackage( dw.object );
importPackage( dw.catalog );
importPackage( dw.util );
importPackage( dw.order);
importScript("malibupilates:common/libCampaingUpsell.ds");

function execute( args : PipelineDictionary ) : Number {
	var CCC : Object = args.CurrentCampaignConfig;
	var recommendationType : Number = args.RecommendationType;
	var isShowSuggest : Boolean = args.IsShowSuggest;
	var basket : Basket = args.Basket;
	var recommendationsSet : Collection = getAllRecommendationsForBasket(basket, recommendationType); //getAllRecommendation(CCC , recommendationType);
	// Remove all recommendation that present in Basket
	var productLIItr : Iterator = basket.getProductLineItems().iterator();
	while(productLIItr.hasNext()){
		var productLItem : ProductLineItem = productLIItr.next();
		recommendationsSet.remove(productLItem.product);
		
	}
	//recommendationsSet.removeAll(productLIList);

	//interstitial page functionality is a bit different for Malibu;
	// business has requested multiple recommendation products
	// on the checkout page, but only vitamins on the interstitial page.
	if(!empty(isShowSuggest) && isShowSuggest == true && recommendationsSet.size()>0){
		var iter : Iterator = recommendationsSet.iterator();
		while (iter.hasNext()) {
			var p : Product = iter.next();
			if (p.brand == "VE" || p.brand == "VI") {
				args.Suggestions = new ArrayList(p);
				args.Recommendations = new ArrayList(p); 
				
				//vitamin offer found
				return PIPELET_NEXT;
			}
		}
		
		//could not find a vitamin in product recommendations
		return PIPELET_ERROR;
		
		//var product : Product = recommendationsSet[0];
		//recommendationsSet.remove(product);
		//args.Suggestions = new ArrayList(product);
		//args.Recommendations = recommendationsSet;
	} else {
		args.Suggestions = recommendationsSet;
		args.Recommendations = recommendationsSet;
	}
	return PIPELET_NEXT;
}
