/**
* This script determines if there is more than one shipment 
* going to the same shipping address. If so, then it combines 
* the shipment items into one shipment.
* 
* @input Basket : dw.order.Basket The basket.
* @input PaymentInstrument : dw.order.PaymentInstrument PaymentInstrument from the list in the Basket.
* @input LitleCVN : String;
* @input orderId : String;
* @input CurrentForms : dw.web.Forms
* @input remoteAddress : String
* @output LitleRequestXML : String Request for debug
* @output ReturnCode : Number ReturnCode (-1:error,0:declined,1:accepted)
* @output LitleCVN : String Invalidated Litle CVN
* @output LitleResponseCode : String LitleResponseCode
* @output LitleResponseMessage : String LitleResponseMessage
* @output LitleResponseTransactionID : String litleTxnId
* @output LitleResponseAuthCode : String Litle authCode
* @output LitleResponseAVSCode : String Litle avsResult
* @output LitleResponseCCVCode : String Litle cardValidationResult
* @output LitleResponseXML : String LitleResponseXML;

*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.net );


function execute( pdict : PipelineDictionary ) : Number
{
	// Read GR specific preferences from Site
	var isZeroAuth : Boolean = dw.system.Site.getCurrent().preferences.custom.LitleIsZeroAuth;
	var checkAVS : Boolean = dw.system.Site.getCurrent().preferences.custom.LitleCheckAVS;

	// get the basket
	var basket : Basket = pdict.Basket;
	var orderId = pdict.orderId;
//	var litleCvn = pdict.LitleCVN;
	var currentForms  = pdict.CurrentForms;
	
	// Pre-set static values, so that they are defined
	var creditCardHolder = "_Holder";
	var creditCardNumber = "_CCNumber";
	var creditCardExpirationMonth = "_ExpMonth";
	var creditCardExpirationYear = "_ExpYear";
	var creditCardType = "_Visa";
	
	var year2digits = creditCardExpirationYear; // .substr(2,2)
	var li_creditCardExpiration = creditCardExpirationMonth + "" + year2digits;
	var li_orderId="li_orderId";
	var li_ammount = "li_ammount";
	var li_name = "li_name";
	var li_customerId = "li_customerId";
	var li_addressLine1 = "adressLine1";
	var li_addressLine2 = "adressLine2";
	var li_addressLine3 = "adressLine3";
	var li_city = "li_city";
	var li_state = "li_state";
	var li_zip = "li_zip";
	var li_country = "li_country";
	var li_email = "";
	var li_phone = "li_phone";
	var li_cvn = "li_cvn";
	var li_ccnumber = "li_ccnumber";
	var li_remoteAddress = "";
	var li_reportGroup = "";
	
	var paymentMethod : String = "CREDIT_CARD"; //"LITLE_CREDIT"
	var paymentInstruments : Collection = basket.getPaymentInstruments( PaymentInstrument.METHOD_CREDIT_CARD );
	var paymentInstrument : OrderPaymentInstrument = null;
	paymentInstrument = paymentInstruments.iterator().next();
    
	if (basket) {
    	
		var creditCardHolder = paymentInstrument.creditCardHolder;
		var creditCardNumber = getCCNumber(paymentInstrument);
		var creditCardExpirationMonth = paymentInstrument.creditCardExpirationMonth;
		var creditCardExpirationYear : String = paymentInstrument.creditCardExpirationYear;
		var creditCardType = paymentInstrument.creditCardType;
		if (creditCardExpirationMonth.toString().length == 1) {
			creditCardExpirationMonth = "0" + creditCardExpirationMonth;
		}
		var year2digits = creditCardExpirationYear.toString().substring(2);
		var li_creditCardExpiration = creditCardExpirationMonth + "" + year2digits;
		var li_orderId = orderId;
//		var li_ammount = (basket.totalGrossPrice.value*100).toFixed();
		var li_name = basket.billingAddress.fullName;
		var li_customerId = basket.customerNo;
		var li_addressLine1 = basket.billingAddress.address1;
		var li_addressLine2 = basket.billingAddress.address2;
		var li_addressLine3 = "";
		var li_city = basket.billingAddress.city;
		var li_state = basket.billingAddress.stateCode;
		var li_zip = basket.billingAddress.postalCode;
		var li_country = basket.billingAddress.countryCode;
		var li_email = basket.customerEmail;
		var li_phone = basket.billingAddress.phone;
		
//	PJP: Note that GR does not use the CVN for Litle transactions
//		var li_cvn = litleCvn;
		var li_ccnumber = creditCardNumber;
		var li_remoteAddress = pdict.remoteAddress;
		var li_reportGroup = dw.system.Site.getCurrent().preferences.custom.LitleReportGroup;
	}
	else {
		// Empty Basket
		pdict.ReturnCode = -1;
		return PIPELET_NEXT;
	}

	// Map credit card types to the litle format
	switch ( creditCardType ) {
		case "Visa":
			creditCardType = "VI";
		break;
		case "Amex":
			creditCardType = "AX";
		break;
		case "Master":
		case "MasterCard":
			creditCardType = "MC";
		break;
		case "Discover":
			creditCardType = "DI";
		break;
	}

	// Read preferences from Site:
	var merchantId_CC : String = null; // PJP: is variable for GR ... dw.system.Site.getCurrent().preferences.custom.LitleMerchantID_CC;
	var username : String = dw.system.Site.getCurrent().preferences.custom.LitleUsername;
	var password : String = dw.system.Site.getCurrent().preferences.custom.LitlePassword;
	var gatewayUrl : String = dw.system.Site.getCurrent().preferences.custom.LitleURL;
	var coreBrand : String = dw.system.Site.getCurrent().preferences.custom.LitleCoreBrand;
	
	// Gather marchantID groups
	var merchant2totals : HashMap = getMerchantsToTotalsHash(basket, coreBrand);
	
	var merchants : Iterator = merchant2totals.keySet().iterator();
	var li_ammount = null;
	var tmpMoney : dw.value.Money = null;
	var brand : String = null;
	
	var responseXML : XML = null;
	var responseCode : XML = null;
	var responseMessage : XML = null;
	var responseTransactionID : String = "";
	var responseAuthCode : String = "";
	var responseAVSCode : String = "";
	var responseCCVCode : String = "";
	
	var httpClient : HTTPClient = null;
	var response : String = null;
	
	var litleRequest = null; 

	while( merchants.hasNext() ) {
		brand = merchants.next();
		
		// PJP: Handle each brand's MerchantID in turn ...
		if( !empty(isZeroAuth) && isZeroAuth.valueOf() ) {
			li_ammount = "0";
		} else {
			tmpMoney = merchant2totals.get( brand );
			li_ammount = (tmpMoney.value*100).toFixed();
		}
		
		//(basket.totalGrossPrice.value*100).toFixed();
		merchantId_CC = getMerchantIDForBrand( brand );		
		
		Logger.debug("merchantID: " + merchantId_CC);
		     
		httpClient = new HTTPClient();
			 
		Logger.debug("gatewayUrl: " + gatewayUrl);
		httpClient.open('POST', gatewayUrl);
			 
		litleRequest = getAuthRequest();
	
		//Call Litle with request
		httpClient.send(litleRequest);
			 
	
		if (httpClient.statusCode == 200)
		{
			response = httpClient.text;
			Logger.debug("litleResponse: " + response);
		}
		else
		{
			// error handling
			response="<message>An error occured with status code: "+httpClient.statusCode + "</message>";
		}
			 
		 responseXML = new XML(response);
		 responseCode = "";
		 responseMessage = "";
		 responseTransactionID = "";
		 responseAuthCode = "";
		 responseAVSCode = "";
		 responseCCVCode = "";
	
		if (responseXML) {
	
			if (responseXML["authorizationResponse"])
			{
				pdict.ReturnCode = 0;
				responseCode = responseXML["authorizationResponse"]["response"];
				responseMessage = responseXML["authorizationResponse"]["message"];
				if (responseCode == "000") {
					pdict.ReturnCode = 1;
				}
				responseTransactionID = responseXML["authorizationResponse"]["litleTxnId"].toString();
				responseAuthCode = responseXML["authorizationResponse"]["authCode"].toString();
				responseAVSCode = responseXML["authorizationResponse"]["fraudResult"]["avsResult"].toString();
				responseCCVCode = responseXML["authorizationResponse"]["fraudResult"]["cardValidationResult"].toString();
			}
		}
		else {
			pdict.ReturnCode = -1;
		}
	
		pdict.LitleRequestXML += litleRequest;
		// -1: Error, 0 : declined, 1:accepted
	
		if (responseCode == "000") {
			pdict.ReturnCode = 1;
		}	    
		
		// Concatenate responses
		if( empty(pdict.LitleResponseCode) ) {
			pdict.LitleResponseCode = responseCode.toString() + "|";
		} else {
			pdict.LitleResponseCode += responseCode.toString() + "|";			
		}
		if( empty(pdict.LitleResponseMessage) ) {
			pdict.LitleResponseMessage = responseMessage.toString() + "|";
		} else {
			pdict.LitleResponseMessage += responseMessage.toString() + "|";
		}
		if( empty(pdict.LitleResponseXML) ) {
			pdict.LitleResponseXML = response + "|";
		} else {
			pdict.LitleResponseXML += response + "|";
		}
		if( empty(pdict.LitleResponseTransactionID) ) {
			pdict.LitleResponseTransactionID = responseTransactionID + "|";
		} else {
			pdict.LitleResponseTransactionID += responseTransactionID + "|";
		}
		if( empty(pdict.LitleResponseAuthCode) ) {
			pdict.LitleResponseAuthCode = responseAuthCode + "|";
		} else {
			pdict.LitleResponseAuthCode += responseAuthCode + "|";
		}
		if( empty(pdict.LitleResponseAVSCode) ) {
			pdict.LitleResponseAVSCode = responseAVSCode + "|";
		} else {
			pdict.LitleResponseAVSCode += responseAVSCode + "|";
		}
		if( empty(pdict.LitleResponseCCVCode) ) {
			pdict.LitleResponseCCVCode = responseCCVCode + "|";
		} else {
			pdict.LitleResponseCCVCode += responseCCVCode + "|";
		}
	}
	
	// Remove trailing "|"
	if( pdict.LitleResponseCode.length>1 ) pdict.LitleResponseCode = pdict.LitleResponseCode.substring(0,pdict.LitleResponseCode.length-1);
	if( pdict.LitleResponseMessage.length>1 ) pdict.LitleResponseMessage = pdict.LitleResponseMessage.substring(0,pdict.LitleResponseMessage.length-1);
	if( pdict.LitleResponseXML.length>1 ) pdict.LitleResponseXML = pdict.LitleResponseXML.substring(0,pdict.LitleResponseXML.length-1);
	if( pdict.LitleResponseTransactionID.length>1 ) pdict.LitleResponseTransactionID = pdict.LitleResponseTransactionID.substring(0,pdict.LitleResponseTransactionID.length-1);
	if( pdict.LitleResponseAuthCode.length>1 ) pdict.LitleResponseAuthCode = pdict.LitleResponseAuthCode.substring(0,pdict.LitleResponseAuthCode.length-1);
	if( pdict.LitleResponseAVSCode.length>1 ) pdict.LitleResponseAVSCode = pdict.LitleResponseAVSCode.substring(0,pdict.LitleResponseAVSCode.length-1);
	if( pdict.LitleResponseCCVCode.length>1 ) pdict.LitleResponseCCVCode = pdict.LitleResponseCCVCode.substring(0,pdict.LitleResponseCCVCode.length-1);
	
	// Delete the CVN at session because of security issues:
	pdict.LitleCVN = null;

	
	return PIPELET_NEXT;
	
	//Inner Functions
		function getMerchantIDForBrand( brand : String ) {
			var json : String = dw.system.Site.getCurrent().preferences.custom.LitleMerchantID_CC;
			
			var lookup : Object = JSON.parse(json);
			
			return lookup[brand];
		}
	
		function getMerchantsToTotalsHash( basket : Basket, coreBrand : String ) {
			var plis : Iterator = basket.getProductLineItems().iterator();
			var outHash : HashMap = new HashMap();
			
			var tmpPLI : dw.order.ProductLineItem = null;
			var tmpTotal : dw.value.Money = null;
			var tmpProduct : dw.catalog.Product = null;
			var tmpBrand : String = null;
			
			var tmpValue : dw.value.Money = null;
			
			var grossTotal : dw.value.Money = basket.getTotalGrossPrice();
			var runningTotal : dw.value.Money = new dw.value.Money(0.0, Site.getCurrent().currencyCode);
			
			while( plis.hasNext() ) {
				tmpPLI = plis.next();
				tmpProduct = tmpPLI.getProduct();
				tmpTotal = tmpPLI.getGrossPrice();
				tmpBrand = tmpProduct.brand;
				
				// Keep running total
				runningTotal = runningTotal.add(tmpTotal);
				
				// Keep running total per brand
				tmpValue = outHash.get( tmpBrand );
				if( !empty( tmpValue ) ) {
					tmpTotal.add( tmpValue );
				}
				outHash.put( tmpBrand, tmpTotal );
			}
			
			// Add remainder to 'core brand total'
			var remainder : dw.value.Money = grossTotal.subtract( runningTotal );
			if( remainder.value > 0.0 ) {
				// Add additional cost to core brand total
				tmpValue = outHash.get( coreBrand );
				if( !empty( tmpValue ) ) {
					remainder = remainder.add( tmpValue );
				}
				outHash.put( coreBrand, remainder );					
			}
			
			return outHash;
		}
	
		// Get an authorization request for CC
		// PJP: Note that '<cardValidationNum>{li_cvn}</cardValidationNum>'
		//	was removed from <card> entity below for GR
		function getAuthRequest() {
			var GetPostXML : XML = new XML(

				<litleOnlineRequest version="7.2" xmlns="http://www.litle.com/schema" merchantId={merchantId_CC}>
					<authentication>
						<user>{username}</user>
						<password>{password}</password>
					</authentication>
					<authorization reportGroup={li_reportGroup}>
						<orderId>{li_orderId}</orderId>
						<amount>{li_ammount}</amount>
						<orderSource>ecommerce</orderSource>
						<billToAddress>
							<name>{li_name}</name>
							<addressLine1>{li_addressLine1}</addressLine1>
							<addressLine2>{li_addressLine2}</addressLine2>
							<addressLine3>{li_addressLine3}</addressLine3>
							<city>{li_city}</city>
							<state>{li_state}</state>
							<zip>{li_zip}</zip>
							<country>{li_country}</country>
							<email>{li_email}</email>
							<phone>{li_phone}</phone>
						</billToAddress>
						<card>
							<type>{creditCardType}</type>
							<number>{li_ccnumber}</number>
							<expDate>{li_creditCardExpiration}</expDate>
						</card>
					</authorization>
				</litleOnlineRequest>
			); 
		
			return GetPostXML.toXMLString();
		}
		// End authorization request function for CC
		
		function getAVSRequest() {
			var GetPostXML : XML = new XML(

				<litleOnlineRequest version="7.2" xmlns="http://www.litle.com/schema" merchantId={merchantId_CC}>
					<authentication>
						<user>{username}</user>
						<password>{password}</password>
					</authentication>
					<authorization reportGroup={li_reportGroup}>
						<orderId>{li_orderId}</orderId>
						<amount>000</amount>
						<orderSource>ecommerce</orderSource>
						<billToAddress>
							<name>{li_name}</name>
							<addressLine1>{li_addressLine1}</addressLine1>
							<addressLine2>{li_addressLine2}</addressLine2>
							<addressLine3>{li_addressLine3}</addressLine3>
							<city>{li_city}</city>
							<state>{li_state}</state>
							<zip>{li_zip}</zip>
							<country>{li_country}</country>
							<email>{li_email}</email>
							<phone>{li_phone}</phone>
						</billToAddress>
						<card>
							<type>{creditCardType}</type>
							<number>{li_ccnumber}</number>
							<expDate>{li_creditCardExpiration}</expDate>
						</card>
					</authorization>
				</litleOnlineRequest>
			); 
		
			return GetPostXML.toXMLString();
		}
		
}
//end of execute function


// Response code mapping:
function getMessageFromResponseCode(code) {
		
		var messageByCode = [];  

		messageByCode['127'] = "Exceeds Approval Amount Limit";
		messageByCode['130'] = "Call Indicated Number";
		messageByCode['140'] = "Update Cardholder Data";
		messageByCode['191'] = "The merchant is not registered in the update program.";
		messageByCode['301'] = "Invalid Account Number";
		messageByCode['302'] = "Account Number Does Not Match Payment Type";
		messageByCode['303'] = "Pick Up Card";
		messageByCode['304'] = "Lost/Stolen Card";
		messageByCode['305'] = "Expired Card";
		messageByCode['307'] = "Restricted Card";
		messageByCode['308'] = "Restricted Card - Chargeback";
		messageByCode['310'] = "Invalid track data";
		messageByCode['311'] = "Deposit is already referenced by a chargeback";
		messageByCode['320'] = "Invalid Expiration Date";
		messageByCode['321'] = "Invalid Merchant";
		messageByCode['322'] = "Invalid Transaction";
		messageByCode['323'] = "No such issuer";
		messageByCode['324'] = "Invalid Pin";
		messageByCode['325'] = "Transaction not allowed at terminal";
		messageByCode['326'] = "Exceeds number of PIN entries";
		messageByCode['327'] = "Cardholder transaction not permitted";
		messageByCode['328'] = "Cardholder requested that recurring or installment payment be stopped";
		messageByCode['330'] = "Invalid Payment Type";
		messageByCode['340'] = "Invalid Amount";
		messageByCode['346'] = "Invalid billing descriptor prefix";
		messageByCode['349'] = "Do Not Honor";
		messageByCode['350'] = "Generic Decline";
		messageByCode['351'] = "Decline - Request Positive ID";
		messageByCode['352'] = "Decline CVV2/CID Fail";
		messageByCode['353'] = "Merchant requested decline due to AVS result";
		messageByCode['354'] = "3D Secure transaction not supported by merchant";
		messageByCode['355'] = "Failed velocity check";
		messageByCode['356'] = "Invalid purchase level III, the transaction contained bad or missing data";
		messageByCode['360'] = "No transaction found with specified litleTxnId";
		messageByCode['361'] = "Transaction found but already referenced by another deposit";
		messageByCode['362'] = "Transaction Not Voided - Already Settled";
		messageByCode['365'] = "Total credit amount exceeds capture amount";
		messageByCode['370'] = "Internal System Error - Call Litle";
		messageByCode['400'] = "No Email Notification was sent for the transaction";
		messageByCode['401'] = "Invalid Email Address";
		messageByCode['500'] = "The account number was changed";
		messageByCode['501'] = "The account was closed";
		messageByCode['502'] = "The expiration date was changed";
		messageByCode['503'] = "The issuing bank does not participate in the update program";
		messageByCode['504'] = "Contact the cardholder for updated information";
		messageByCode['505'] = "No match found";
		messageByCode['506'] = "No changes found";
		messageByCode['601'] = "Soft Decline - Primary Funding Source Failed";
		messageByCode['602'] = "Soft Decline - Buyer has alternate funding source";
		messageByCode['610'] = "Hard Decline - Invalid Billing Agreement Id";
		messageByCode['611'] = "Hard Decline - Primary Funding Source Failed";
		messageByCode['612'] = "Hard Decline - Issue with Paypal Account";
		messageByCode['701'] = "Under 18 years old";
		messageByCode['702'] = "Bill to outside USA";
		messageByCode['703'] = "Bill to address is not equal to ship to address";
		messageByCode['704'] = "Declined, foreign currency, must be USD";
		messageByCode['705'] = "On negative file";
		messageByCode['706'] = "Blocked agreement";
		messageByCode['707'] = "Insufficient buying power";
		messageByCode['708'] = "Invalid Data";
		messageByCode['709'] = "Invalid Data - data elements missing";
		messageByCode['710'] = "Invalid Data - data format error";
		messageByCode['711'] = "Invalid Data - Invalid T&C version";
		messageByCode['712'] = "Duplicate transaction";
		messageByCode['713'] = "Verify billing address";
		messageByCode['714'] = "Inactive Account";
		messageByCode['715'] = "Do not honor";
		messageByCode['716'] = "Invalid Auth";
		
		return messageByCode[code];
}

function getCCNumber(paymentInstrument : dw.order.PaymentInstrument) {
    var ccNumber : String = paymentInstrument.
        getEncryptedCreditCardNumber(dw.order.PaymentInstrument.ENCRYPTION_ALGORITHM_RSA, 
                                     getPublicKey());
     ccNumber = (new dw.crypto.Cipher()).decrypt(ccNumber, 
                                      getPrivateKey(),
                                      dw.order.PaymentInstrument.ENCRYPTION_ALGORITHM_RSA,
                                      '', 
                                      0);
	return ccNumber;
}


function getPrivateKey() {

	
	 var privateKeyPKS = ""+
	
		
			"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCeh7p7deW8UuCg"+
			"vIoihG8HDa5xy7w9FwtZzd9AYocFnyyWfdoTYWEthkNvs0xavfQ+rrUTz6hrkouL"+
			"3ot0FI8NiQL5z/8j78S2Cv/ivG2B8vX/+559adtRtxmBONfp3Nkuy6C6CVMkJZWd"+
			"sPzgCzv6S1nsz8idL0uRJmsO4PiMEOLv4x7/x4vALU/EiqZSeRzhgNzedz9Jd5Ng"+
			"PbxNeTdmMOFEhD80O4eZzJrwY+v1GcxgHdbLYPawWPDbCZRfyegpOBvr4Dv/9dWg"+
			"vyYZiIocl1Y5c0KY+827wZVXaGIl9UNl9nOkG9sdjXYiWUcwn9lFkmWY7wsJN0t6"+
			"LeavWyDbAgMBAAECggEACZCCzcQVMkGFz+zQILkAwdovdioml0D2rFphZ88J+mra"+
			"E9JP/+9WH5sEIo8cwjTHsah0wFc9ABB9Xtj0bPJ4lwZ3KX9FE3P52Endml5n9Pkl"+
			"omYZ79MdKlbzsPou/KsYZ1xdvBun6nxiBHuTJilHWxiEumbm4aTi2EULHICyPjEG"+
			"Tkzcp53bhfqzITRiQ6J13Nq+T+rYAvqbJBlp20Y7Ik4n8UZ57y/E09fw0/lqz842"+
			"81pONmXwdvIOPFM+6mCFbmrgn24i8TCgFO9fOuaoAC2wP9Sr3yPRAIcTvlFnqmDW"+
			"vSZ6WDfuW7Ultl5I0Bky2Ir6h9Qywc1KEHHW0rA2wQKBgQDPh8Rn8+ic1bXb+HdQ"+
			"Y5YClskM5zh3qikDlhGiWDSYQqG3xbmZIxlGBr+ZpBSpFcLWPYHGLhCJ+1yxgBsE"+
			"Qt9f1e5PB0cnpdhZS0Y4oIQpIsiPkMeE5xB2GqKEgrl/GF8x7M7xPrn1RyViUH5L"+
			"Kh34eqaA4EeUCSMZhJqPQOEFcQKBgQDDjj5gxo+cs2tWifAmJoVBcSMVVEXoAYyU"+
			"RrR00J3xVGwvGaIrdmnc22Ku8tEWggqDkLk6ZNjZrfWRKuzMm9oZjSZh6j8PeZvq"+
			"CiUjMWq/D3PY0Yeh/x1yBdvX5Q3Ns48A5jwhfjn6Ufif9VXsM/UP8YVEv/zjxWrV"+
			"ANjssse1CwKBgHtsAyLPrEeZ0c5AtrTYhR6FDozd9nc0e6/mUBZ83squ1f61WOv6"+
			"M82xtcFqE997UaSYb9WtD6kAFOB7j5W5L5+PW2skqOyrdT+lxN1omTDdvumi8QXZ"+
			"ZbDXpk+obylnFTZb37cZ1v5IkbMmq/WH1sswJlX/DJK93GIQutr3etwBAoGBAKkn"+
			"dHufpgAFDtcHcCx/64plA9TiVanPFTv5QQU+ozBqNz4yrR1tSzsYpe7w6L3QdKnD"+
			"WQXSz+TTXfRZLgX61hh+CPJvfmazaZNzfRZJG63y/uFQtUMCewTzXmwMnPkO1acQ"+
			"gHj0R9BocWhj/hPYCaXl48JJU8XuMW/YUMvGBYtrAoGBAMkM5z8s9yJqzNnIAuXp"+
			"cX11Fxo+XRGuOWh+xg8FUqqIuG1KiCoRrM7TbsGVJDnDsDSaGOzrNYLFK+2rGdz3"+
			"P8EYKf0Gqo7U0t2RqdLemHcrumCKJ7VmWTOXA2m2xm4A9mB6CTYewBpP3fnOTIZx"+
			"v5NhXeLVNb/1WxysOC00Csjj";
			
				
	return privateKeyPKS;
  
}

function getPublicKey() {
  var publicKey = ""+

		"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnoe6e3XlvFLgoLyKIoRv"+
		"Bw2uccu8PRcLWc3fQGKHBZ8sln3aE2FhLYZDb7NMWr30Pq61E8+oa5KLi96LdBSP"+
		"DYkC+c//I+/Etgr/4rxtgfL1//uefWnbUbcZgTjX6dzZLsuguglTJCWVnbD84As7"+
		"+ktZ7M/InS9LkSZrDuD4jBDi7+Me/8eLwC1PxIqmUnkc4YDc3nc/SXeTYD28TXk3"+
		"ZjDhRIQ/NDuHmcya8GPr9RnMYB3Wy2D2sFjw2wmUX8noKTgb6+A7//XVoL8mGYiK"+
		"HJdWOXNCmPvNu8GVV2hiJfVDZfZzpBvbHY12IllHMJ/ZRZJlmO8LCTdLei3mr1sg"+
		"2wIDAQAB";

  return publicKey;
}
