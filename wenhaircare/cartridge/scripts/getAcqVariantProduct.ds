/**
* Demandware Script File 
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* 
*
*   @input masterProdID : String id of master product.
*   @input fstVarAttrName : String
*   @input fstVarVal : String
*   @output pid : String variant for passed variant ids
*
*/
importPackage( dw.system );
importPackage( dw.catalog);

function execute( pdict : PipelineDictionary ) : Number
{


    var masterProd: Product = ProductMgr.getProduct(pdict.masterProdID);
    var fstVarAttrName: String = pdict.fstVarAttrName;
    var fragVal: String = pdict.fstVarVal; 
	
	if(!empty(masterProd) && masterProd.master){
		var PVM: ProductVariationModel = masterProd.variationModel;
		var varAttr = PVM.getProductVariationAttribute(fstVarAttrName);
		
		var varProds: dw.util.Collection = PVM.getVariants();
		var filteredProducts: dw.util.ArrayList = getFilteredProducts(PVM, varProds, varAttr, fragVal);
		
		pdict.pid = filteredProducts.get(0).ID;
		return PIPELET_NEXT;

	} else {
		Logger.debug("Invalid Master Product Specified: "+pdict.masterProdID);
	 	return PIPELET_ERROR;
	}
}


function getFilteredProducts(PVM: PipelineDictionary, varProds : PipelineDictionary, varAttr: String, varVal: String) : dw.util.ArrayList
{
	
	if( null == varAttr || null == varVal)
		return varProds;
	
	var filteredProducts: dw.util.ArrayList = new dw.util.ArrayList();
		
	for each(var attr in varProds){
	
		var variationVal: ProductVariationAttributeValue = PVM.getVariationValue( attr, varAttr);
		
		if( variationVal.ID == varVal){
			filteredProducts.add( attr);
		}
	}
		
	if( 0 == filteredProducts.size())
		filteredProducts = varProds;		
		
	return filteredProducts;
}
