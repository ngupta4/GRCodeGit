/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Location : String 
*   @input OriginalURL : String
*   @input couponCode : String
*   @output CampaignCode : String 
*   @output UciCode : String
*   @output PhoneNumber : String
*   @output CampaignConfig : Object
*	@output LocationOut : String
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.object );

importScript( 'guthyrenker_core:common/libUtils.ds' );

var log : Log = Logger.getLogger("FindCampaignConfigurationFromLocation.ds");

/* added shared singleton to prevent code from running more than once per request */
var sharedCCC : Object = null;

function execute( args : PipelineDictionary ) : Number
{
	var response : Response = Response;
	
	var location : String = args.Location;
	var queryPart : String = unescape(location).split('?')[1];
	var paramArray : Array = queryPart.split('&');
	var grcid : String = null;
	var uci : String = null;
	var ukey : String = null;
	var grcph : String = null;
	var param : String = null;
	var pr:String = null;
	var sc:String = null;
	var sid:String = null;
	var renew:String = null;
	
	for( var i=0, ii=paramArray.length; i<ii; i++ ) {
		param = paramArray[i];
		if( param.indexOf("grcid")>-1 ) {
			grcid = param.split("=")[1];	
		} else if( param.indexOf("UCI")>-1 ) {
			uci = param.split("=")[1];	
		} else if( param.indexOf("uci")>-1 ) {
            uci = param.split("=")[1];
		} else if( param.indexOf("ukey")>-1 ) {
			ukey = param.split("=")[1];	
		} else if (param.indexOf("auth")>-1){
			ukey = param.split("=")[1];
		} else if (param.indexOf("authkey")>-1){
			ukey = param.split("=")[1];
		} else if( param.indexOf("grcph")>-1 ) {
			grcph = param.split("=")[1];	
		} else if( param.indexOf("sc")>-1 ) {
			sc = param.split("=")[1];	
		} else if( param.indexOf("pr")>-1 ) {
			pr = param.split("=")[1];	
		} else if( param.indexOf("sid")>-1 ) {
			sid = param.split("=")[1];	
		} else if( param.indexOf("renew")>-1 ) {
			renew = param.split("=")[1];	
		}
	}
	args.CampaignCode = grcid;
	args.UciCode = uci;
	args.PhoneNumber = grcph;
	
	// Added to capture ukey codes hidden in mappings
	if( !empty(ukey) ) {
		request.session.custom.ukey = ukey;	
	}
	
	if( empty(sharedCCC) ) {
		var campaignCodes : Array = empty(args.CampaignCode) ? [null] : args.CampaignCode.split('&');
		var uciCodes : Array = empty(args.UciCode) ? [null] : args.UciCode.split('&');
		
		var campaignCode : String = campaignCodes[0];
		var uciCode : String = uciCodes[0];
		var phoneNumber : String = args.PhoneNumber;
	
		var index = -1;//pdict.OriginalURL.indexOf('grcph=');
		var endIndex = -1;//pdict.OriginalURL.indexOf('&',index);
		var grcph = null;
		
		if( empty(phoneNumber) ) {
			if( campaignCodes.length>1 ) {
				index = args.CampaignCode.indexOf('grcph=');
				endIndex = args.CampaignCode.indexOf('&',index);
				if( index>0 ) {
					if( endIndex>0 ) {
						phoneNumber = args.CampaignCode.substring(index+6, endIndex);
					} else {
						phoneNumber = args.CampaignCode.substring(index+6);
					}
				}		
			} 
			if( empty(phoneNumber) && uciCodes.length>1 ) {
				index = args.UciCode.indexOf('grcph=');
				endIndex = args.UciCode.indexOf('&',index);
				if( index>0 ) {
					if( endIndex>0 ) {
						phoneNumber = args.UciCode.substring(index+6, endIndex);
					} else {
						phoneNumber = args.UciCode.substring(index+6);
					}
				}		
			}
		}
		//campaign changed so lets reset phonenumber
		if(campaignCode)
			setCurrentPhoneNumber(null);
		
		sharedCCC = getCurrentCampaignConfig( campaignCode, uciCode, phoneNumber );
	}
	
	args.CampaignConfig = sharedCCC;

	if( !empty(sharedCCC) && sharedCCC.isAddToCart ) {
		// Future test will
		var CoreOffer : Product = sharedCCC.getDefaultCoreOffer();
		//log.error ("sasOfferCodes: " + sharedCCC.sasOfferCodes);
		/* Temporary fix to pull the coupon code from the url and pass it to the cart page.
		   We should probably be refactoring this entire section to dynamically handle http parameters.
		   Without this code the first variable in the url was set to /?var instead of var*/
		
		var couponCode = "";
		var couponCodeName = "";   
		var url : String = args.OriginalURL.toString();
		var index = url.indexOf('couponCode=');
		var endIndex = url.indexOf('&',index);
		if( index>0 ) {
			if( endIndex>0 ) {
				var couponCode = args.OriginalURL.substring(index + 11, endIndex);
			}
			else {
				var couponCode = args.OriginalURL.substring(index + 11);
			}
			couponCodeName = "couponCode";
		}
		//condition tellpal.id confers that url is from refer a friend functionlity. so appending all query parameters to url as it is.
		var tIndex = url.indexOf("tellapal.id");
		if(-1 != tIndex){
			var tSubStr = url.substring(tIndex);
			args.LocationOut = dw.web.URLUtils.https('COCart-AddProduct','pid',CoreOffer.ID, couponCodeName,couponCode).toString();
			args.LocationOut = args.LocationOut.concat("&"+tSubStr);
		}else if (!empty(uciCode) && (uciCode != "")) {
			args.LocationOut = dw.web.URLUtils.https('COCart-AddProduct','pid',CoreOffer.ID,'uci',uciCode,couponCodeName,couponCode).toString();
		}else if (!empty(sid) && (sid != "") && !empty(sc) && (sc != "") && !empty(pr) && (pr != "")) {
			args.LocationOut = dw.web.URLUtils.https('COCart-AddProduct','pid',CoreOffer.ID,'sc',sc,'pr',pr,'sid',sid,'renew',renew,couponCodeName,couponCode).toString();
		}else if (!empty(sc) && (sc != "") && !empty(pr) && (pr != "")) {
			args.LocationOut = dw.web.URLUtils.https('COCart-AddProduct','pid',CoreOffer.ID,'sc',sc,'pr',pr,couponCodeName,couponCode).toString();
		} else {
			args.LocationOut = dw.web.URLUtils.https('COCart-AddProduct','pid',CoreOffer.ID, couponCodeName,couponCode).toString();
		}
	} else {
	 	var url : String = args.OriginalURL.toString();
		var index = url.indexOf('grcph=');
		var endIndex = url.indexOf('&',index);
		var grcph : String = null;
		var location : String = args.Location.split('%26')[0];
		if( index>0 ) {
			if( endIndex>0 ) {
				grcph = args.OriginalURL.substring(index, endIndex);
			} else {
				grcph = args.OriginalURL.substring(index);
			}
		}
		if( location.indexOf('?')>0 && !empty(grcph) ) {
			location += "&"+grcph;
		} else if( !empty(grcph) ) {
			location += "?"+grcph;
		}
		args.LocationOut = location;
	}
	
	log.debug('Original URL: '+args.OriginalURL);
	log.debug('Original Mapped Location: '+args.Location);
	log.debug('Modified Mapped Location: '+args.LocationOut);
	
	return PIPELET_NEXT;
}
