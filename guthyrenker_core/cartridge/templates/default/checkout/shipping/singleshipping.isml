<isdecorate template="checkout/pt_checkout">
<isinclude template="util/modules"/>

<iscomment>
	This template visualizes the first step of the single shipping checkout
	scenario. It renders a form for the shipping address and shipping method
	selection. Both are stored at a single shipment only.
</iscomment>

<iscomment>Report this checkout step (we need to report two steps)</iscomment>

<isreportcheckout checkoutstep="${2}" checkoutname="${'ShippingAddress'}"/>
<isreportcheckout checkoutstep="${3}" checkoutname="${'ShippingMethod'}"/>
<isscript>
	var productListAddresses : dw.util.HashMap 	= new dw.util.HashMap(),
		owners : dw.util.HashMap 				= new dw.util.HashMap(),
		productListTypes : dw.util.HashMap 		= new dw.util.HashMap(),
		addressesJsonStr 						= "";
		
	if (pdict.Basket != null && pdict.Basket.productLineItems.size() > 0) {
		addressesJsonStr = "{";
		var lineItemsIt = pdict.Basket.productLineItems.iterator(),		
			lineitem 	= null, 
			productList = null, 
			address 	= null;
		
		while (lineItemsIt.hasNext()) {
			lineitem = lineItemsIt.next();
			
			if (lineitem.productListItem != null 		&& 
				lineitem.productListItem.list != null 	&& 
				( lineitem.productListItem.list.type == dw.customer.ProductList.TYPE_WISH_LIST || lineitem.productListItem.list.type == dw.customer.ProductList.TYPE_GIFT_REGISTRY) ) {
				
				productList = lineitem.productListItem.list;
				
				if (productList != null && pdict.CurrentCustomer != productList.owner) {
					address = productList.shippingAddress;
					
					if (address != null) {	
						productListAddresses.put(productList.owner.profile.credentials.login+'??'+address.ID, address);
						owners.put(productList.owner.profile.credentials.login+'??'+address.ID, productList.owner);
						productListTypes.put(productList.owner.profile.credentials.login+'??'+address.ID, lineitem.productListItem.list.type);
						addressesJsonStr += "'"+productList.owner.profile.credentials.login+'??'+address.ID+"':"+"{address:{ID:'"+address.ID+"',firstName:'"+address.firstName+"',lastName:'"+address.lastName+"',address1:'"+address.address1+"',address2:'"+address.address2+"',postalCode:'"+address.postalCode+"',city:'"+address.city+"',stateCode:'"+address.stateCode+"',countryCode:'"+address.countryCode.value+"',phone:'"+address.phone+"'}}";
						if (lineItemsIt.hasNext()) {
							addressesJsonStr += ",";
						}
					}
				}
			}
		}
		addressesJsonStr +="}";
		// get rid of null vals 
		addressesJsonStr = addressesJsonStr.replace(new RegExp('null', 'g'), '');
	}
</isscript>

<div class="checkout">
    <iscomment>checkout progress indicator</iscomment>
    <ischeckoutprogressindicator step="1" rendershipping="${pdict.Basket.productLineItems.size() == 0 ? 'false' : 'true'}"/>
    <div class="checkoutshipping">
	<form action="${URLUtils.continueURL()}" method="post" id="${pdict.CurrentForms.singleshipping.shippingAddress.htmlName}">
		<iscomment>shipping address area</iscomment>
		<div id="addressform" class="addressform">
			<h5>${Resource.msg('singleshipping.enteraddress','checkout',null)}</h5>
			<iscomment>Entry point for Multi-Shipping (disabled on purpose)</iscomment>
			<isif condition="${pdict.Basket.productLineItems.size() > 1 && false}">
				<div class="shiptomultiple">
					${Resource.msg('singleshipping.multiple','checkout',null)} <button class="shiptomultiplebutton textbutton" type="submit" name="${pdict.CurrentForms.singleshipping.shipToMultiple.htmlName}" value="${Resource.msg('global.yes','locale',null)}"><span>${Resource.msg('global.yes','locale',null)}</span></button>
				</div><!-- END: shiptomultiple -->
			</isif>
			<iscomment>display select box with stored addresses if customer is authenticated and there are saved addresses</iscomment>
			<isif condition="${pdict.CurrentCustomer.authenticated && pdict.CurrentCustomer.profile.addressBook.addresses.size() > 0}">
				<div class="addresslist">
					<div class="selectaddress">
						<span class="selectaddressstar">*</span>
						<span class="selectaddressmessage">Select or Enter a Shipping Address:</span>
						<div class="clear"><!-- FLOAT CLEAR --></div>
					</div><!-- END: selectaddress -->
					<select name="${pdict.CurrentForms.singleshipping.addressList.htmlName}">
						<option value="" selected="selected">${Resource.msg('forms.address.list.select','forms',null)}</option>

						<isif condition="${pdict.CurrentCustomer.profile.addressBook.addresses.size() == 0}">
							<option value="">${Resource.msg('forms.address.list.none','forms',null)}</option>
						<iselse/>
							<isloop items="${pdict.CurrentCustomer.profile.addressBook.addresses}" var="address">
								<option value="${address.ID}">(<isprint value="${address.ID}"/>) <isprint value="${address.address1}"/>, <isprint value="${address.city}"/>, <isprint value="${address.stateCode}"/>, <isprint value="${address.postalCode}"/></option>
							</isloop>
						</isif>
						<isloop items="${productListAddresses.keySet()}" var="addressKey">
							<isset name="address" value="${productListAddresses.get(addressKey)}" scope="page"/>
							<option value="${addressKey}" ${address.ID == pdict.SelectedAddressID ? "selected='selected'" : ""}>
							(
							<isif condition="${productListTypes.get(addressKey) == dw.customer.ProductList.TYPE_WISH_LIST}">
								${Resource.msgf( 'singleshipping.wishlist', 'checkout', null, owners.get(addressKey).profile.firstName )}
							<iselseif condition="${productListTypes.get(addressKey) == dw.customer.ProductList.TYPE_GIFT_REGISTRY}">
								${Resource.msgf( 'singleshipping.giftregistry', 'checkout', null, owners.get(addressKey).profile.firstName )}
							<iselse>
								<isprint value="${address.ID}"/>
							</isif>
							) <isprint value="${address.address1}"/>, <isprint value="${address.city}"/>, <isprint value="${address.stateCode}"/>, <isprint value="${address.postalCode}"/></option>
						</isloop>					
					</select><isif condition="${productListAddresses.size() > 0}"><div class="hidden json">${addressesJsonStr}</div></isif>
				</div><!-- END: addresslist -->
			<iselse>
				<isif condition="${productListAddresses.size() > 0}">
					<div class="addresslist">	
						<div class="selectaddress">
							<select class="selectbox" name="${pdict.CurrentForms.singleshipping.addressList.htmlName}">
							<isif condition="${productListAddresses.size() > 1}">		
								<option value="">${Resource.msg('forms.address.list.select','forms',null)}</option>
							</isif>
							<isloop items="${productListAddresses.keySet()}" var="addressKey">
								<isset name="address" value="${productListAddresses.get(addressKey)}" scope="page"/>									
								<option value="${addressKey}" ${address.ID == pdict.SelectedAddressID ? "selected='selected'" : ""}>
								(
								<isif condition="${productListTypes.get(addressKey) == dw.customer.ProductList.TYPE_WISH_LIST}">
									${Resource.msgf( 'singleshipping.wishlist', 'checkout', null, owners.get(addressKey).profile.firstName )}
								<iselseif condition="${productListTypes.get(addressKey) == dw.customer.ProductList.TYPE_GIFT_REGISTRY}">
									${Resource.msgf( 'singleshipping.giftregistry', 'checkout', null, owners.get(addressKey).profile.firstName )}
								<iselse>
									<isprint value="${address.ID}"/>
								</isif>
								) <isprint value="${address.address1}"/>, <isprint value="${address.city}"/>, <isprint value="${address.stateCode}"/>, <isprint value="${address.postalCode}"/></option>
							</isloop></select><div class="hidden json">${addressesJsonStr}</div>
							<div class="clear"><!-- FLOAT CLEAR --></div>
						</div><!-- END: selectaddress -->
					</div><!-- END: addresslist -->
				</isif>
			</isif>	
			<div class="formfield required">
				<div class="label"><span class="requiredindicator">*</span><span class="requiredmessage">${Resource.msg('global.requiredfield','locale',null)}</span></div>
				<div class="value"><!-- Empty Value Container --></div>
				<div class="clear"><!-- FLOAT CLEAR --></div>
			</div><!-- END: required -->
		    <div class="formfield firstname">
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.firstName}" type="input" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.firstName}" type="input" label="false"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: firstname -->
		    <div class="formfield lastname">
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.lastName}" type="input" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.lastName}" type="input" label="false"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: lastname -->
		    <div class="formfield address1">
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.address1}" type="input" value="false"/>
	    		<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.address1}" type="input" label="false"/>
		    	<span class="formfieldtooltip">(<a class="tooltip">${Resource.msg('singleshipping.apofpo','checkout',null)}<div class="tooltip-body" style="display:none"><div class="tooltipcontainer"><iscontentasset aid="apo-fpo"/></div></div></a>)</span>		    	
		    	<div class="clear"><!-- FLOAT CLEAR --></div>			
		    </div><!-- END: address1 -->
		    <div class="formfield address2">
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.address2}" type="input" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.address2}" type="input" label="false"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: address2 -->
		    <div class="formfield country">
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.country}" type="select" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.country}" type="select" label="false"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: country -->
		    <div class="formfield state">
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state}" type="select" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state}" type="select" label="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.stateUS}" type="select" label="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.stateCA}" type="select" label="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.stateDE}" type="select" label="false"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: state -->
		    <div class="formfield city">
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.city}" type="input" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.city}" type="input" label="false"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: city -->
		    <div class="formfield zip">
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.zip}" type="input" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.zip}" type="input" label="false"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: zip -->
		    <div class="formfield phone">
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.phone}" type="input" value="false"/>
	    		<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.phone}" type="input" label="false" xhtmlclass="phoneUS"/>
		    	<span class="formfieldtooltip">(<a class="tooltip">${Resource.msg('singleshipping.phonerequired','checkout',null)}<div class="tooltip-body" style="display:none"><div class="tooltipcontainer"><iscontentasset aid="help-telephone"/></div></div></a>)</span>		    	
		    	<div class="clear"><!-- FLOAT CLEAR --></div>			
		    </div><!-- END: phone -->
		    <div class="formfield addressoptions">
		    	<div class="label">&nbsp;</div><!-- END: label -->
		    	<div class="value">	
		    		<iscomment>Add address to Address Book</iscomment>
		    		<isif condition="${pdict.CurrentCustomer.authenticated}">
		    			<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.addToAddressBook}" type="checkbox"/>
		    		</isif>
		    		<iscomment>Use address for Billing Address</iscomment>
		    		<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.useAsBillingAddress}" type="checkbox"/>
	    		</div><!-- END: value -->
		    	<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: addressoptions -->
		    <div class="formfield giftmessage">
		    	<div class="label"><isprint value="${Resource.msg(pdict.CurrentForms.singleshipping.shippingAddress.isGift.label,'forms',null)}">:</div>
	    		<div class="value">
	    			<input class="isgiftyes" type="radio" name="${pdict.CurrentForms.singleshipping.shippingAddress.isGift.htmlName}" id="isgiftyes" value="true" <isif condition="${pdict.CurrentForms.singleshipping.shippingAddress.isGift.value}">checked="checked"</isif> /> <label for="isgiftyes">Yes</label>
	    			<input class="isgiftno" type="radio" name="${pdict.CurrentForms.singleshipping.shippingAddress.isGift.htmlName}" id="isgiftno" value="false" <isif condition="${!pdict.CurrentForms.singleshipping.shippingAddress.isGift.value}">checked="checked"</isif> /> <label for="isgiftno">No</label>
	    		</div><!-- END: value -->
		    	<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: giftmessage -->
		    <div class="giftmessagetext">
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.giftMessage}" type="textarea" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.singleshipping.shippingAddress.giftMessage}" type="textarea" label="false" attribute1="rows" value1="4" attribute2="cols" value2="10"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: giftmessagetext -->
		</div><!-- END: shippingaddress -->

		<div id="shippingmethodform">
		</div><!-- END: shippingmethodform -->

		<div class="formactions">
			<div class="continuecheckoutbutton">
				<button class="imagebutton continuecheckout" type="submit" name="${pdict.CurrentForms.singleshipping.shippingAddress.save.htmlName}" value="${Resource.msg('global.continuecheckout','locale',null)}"><span>${Resource.msg('global.continuecheckout','locale',null)}</span></button>
			</div><!-- END: continuecheckoutbutton -->
			<iscomment>Entry point for Multi-Shipping (disabled on purpose)</iscomment>
			<isif condition="${pdict.Basket.productLineItems.size() > 1 && false}">
				<div class="shiptomultiple">
					${Resource.msg('singleshipping.multiple','checkout',null)} <a href="${URLUtils.https('COShippingMultiple-Start')}">${Resource.msg('global.yes','locale',null)}</a>
				</div><!-- END: shiptomultiple -->
			</isif>
		</div><!-- END: continuecheckout -->
		
		<input type="hidden" name="${pdict.CurrentForms.singleshipping.secureKeyHtmlName}" value="${pdict.CurrentForms.singleshipping.secureKeyValue}"/>
	</form>
</div><!-- END: checkoutshipping -->
</div><!-- END: checkout -->

<script type="text/javascript"><!--

// disable State selection on Address Creation		
jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]").attr("disabled", true);

// enable or disable State selection on Address Creation base on Country Selection
jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.country.htmlName}]").change(function() {
	if ( jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.country.htmlName}]").val()=="")
		jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]").attr("disabled", true);
	else
		jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]").attr("disabled", false);
	});

// init gift message box
function initGiftMessageBox() {
	// show gift message box, if shipment is gift
	if(jQuery("input.isgiftno:checked").length == 1) jQuery(".giftmessagetext").hide();
	else jQuery(".giftmessagetext").show();

	// init left character count and max characters
	var max = 250;
	var text = jQuery(".giftmessagetext span.caption").html();
	jQuery(".giftmessagetext span.caption").html( text.replace("XXX", "<span class=\"count\"><\/span>").replace("YYY", max) );
	var count = jQuery(".giftmessagetext textarea").val().length;
	var left = max - count;
	jQuery(".giftmessagetext span.count").text(left);
}

// updates the address form with the attributes of a given address
function updateAddressForm(addressID, address)
{
	var updateAddressFormFields = function(data, addressID) {
		// fill the form		
		jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.firstName.htmlName}]").val(data.address.firstName);
		jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.lastName.htmlName}]").val(data.address.lastName);
		jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.address1.htmlName}]").val(data.address.address1);
		jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.address2.htmlName}]").val(data.address.address2);
		jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.city.htmlName}]").val(data.address.city);
		jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.zip.htmlName}]").val(data.address.postalCode);
		changeFormSelection(jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.country.htmlName}]")[0], data.address.countryCode);
		updateStateOptions(data.address.countryCode);
		changeFormSelection(jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]")[0], data.address.stateCode);
		jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.phone.htmlName}]").val(data.address.phone);
		}
	
	if ( address && typeof address == 'object' )
	{
		// we have address data as json
		updateAddressFormFields( address, addressID );
	}
	else { 
		// load address details
		var url = app.util.appendParamToURL("${URLUtils.https('Address-GetAddressDetails')}", "addressID", addressID);
		var result = app.ajax.getJson({
			url: url,
			callback: function(data) {
				if(!data || !data.address) {
					alert("${Resource.msg('checkout.addressloaderror','checkout',null)}");
					return false;
				}
				// fill the form
				updateAddressFormFields( data, addressID );
				// remove error messaging
				jQuery("#addressform span.errormessage").remove();
				jQuery("#addressform input.errormessage").removeClass("errormessage");
				jQuery("#addressform .errorlabel").removeClass("errorlabel");

				// Check if the list of shipping methods needs to change
				updateShippingMethodList();
			}
		});
	}

	// update the order summary to reflect the correct tax rate for this state
	updateSummary(jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]").val());
}

// changes the selection of the given form select to the given value
function changeFormSelection(selectElem, selectedValue)
{
	if(!selectElem) return;
	var options = selectElem.options;
	if(options.length > 0) {
		// find index of value to select
		var idx = 0;
		for(var i=0; i<options.length; i++) {
			if(options[i].value != selectedValue) continue;
			idx = i; break;
		}
		selectElem.selectedIndex = idx;
	}
}

// updates the current address list entry with the updated address details
function updateAddressListEntry() {
	// get the current address ID and load address details
	var addressID = jQuery("select[name=${pdict.CurrentForms.singleshipping.addressList.htmlName}]").val();
	var url = app.util.appendParamToURL("${URLUtils.https('Address-GetAddressDetails')}", "addressID", addressID);
	var result = app.ajax.getJson({
		url: url,
		callback: function(data) {
			if(!data || !data.address) {
				alert("${Resource.msg('checkout.addressloaderror','checkout',null)}");
				return false;
			}
			// update the address select entry
			var addressLine = "(" + data.address.ID + ") " + data.address.address1 + ", " + data.address.city +
				", " + data.address.stateCode + ", " + data.address.postalCode;

			// update address list entry
			var optionElem = jQuery("select[name=${pdict.CurrentForms.singleshipping.addressList.htmlName}] > option[value=" + data.address.ID + "]");
			optionElem.html(addressLine);
		}
	});
}

// removes the current address list entry
function removeAddressListEntry() {
	// get the current address ID
	var addressID = jQuery("select[name=${pdict.CurrentForms.singleshipping.addressList.htmlName}]").val();
	// remove the option element
	var optionElem = jQuery("select[name=${pdict.CurrentForms.singleshipping.addressList.htmlName}] > option[value=" + addressID + "]");
	optionElem.remove();
	// reset selection to first entry
	jQuery("select[name=${pdict.CurrentForms.singleshipping.addressList.htmlName}]")[0].selectedIndex = 0;
}

// selects a shipping method for the default shipment
// and updates the summary section on the right hand side
function selectShippingMethod(shippingMethodID) {
	// nothing entered
	if(!shippingMethodID) {
		return;
	}
	// attempt to set shipping method
	var url = getShippingMethodURL("${URLUtils.https('COShipping-SelectShippingMethod')}");
	url = app.util.appendParamToURL(url, "shippingMethodID", shippingMethodID);
	var result = app.ajax.getJson({
		url: url,
		callback: function(data) {
			updateSummary();
			if(!data || !data.shippingMethodID) {
				alert("Couldn't select shipping method.");
				return false;
			}
			// display promotion in UI and update the summary section,
			// if some promotions were applied
			jQuery(".shippingpromotions").empty();
			if(data.shippingPriceAdjustments && data.shippingPriceAdjustments.length > 0) {
				for(var i=0; i<data.shippingPriceAdjustments.length; i++) {
					var spa = data.shippingPriceAdjustments[i];
					jQuery(".shippingpromotions").append("<div>${Resource.msg('shipment.qualifiesfor','checkout',null)} " + spa.calloutMessage + "<\/div>");
				}
			}
		}
	});
}

// updates the order summary based on a possibly recalculated 
// basket after a shipping promotion has been applied
function updateSummary() {
	var url = "${URLUtils.url('COBilling-UpdateSummary')}";

	// indicate progress
	jQuery("#rightcolumn").html(app.showProgress());

	// load the updated summary area
	jQuery("#rightcolumn").load( url, function() { 
		// hide edit shipping method link 
		jQuery("#rightcolumn").fadeIn("fast"); 
		jQuery('.checkoutminisummary .minishipment .header a').hide(); 
		jQuery('.ordertotalstable .ordershipping .label a').hide(); 
	});
}

/**
 * Cached JavaScript array of currently applicable shipping methods.
 */
var shippingMethods;

/**
 * Helper method which constructs a URL for an AJAX request using the 
 * entered address information as URL request parameters.
 */
function getShippingMethodURL(url) 
{
	var countryCode = jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.country.htmlName}]").val();
	var stateCode = jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]").val();
	var postalCode = jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.zip.htmlName}]").val();
	var city = jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.city.htmlName}]").val();

	url = app.util.appendParamToURL(url, "countryCode", countryCode);
	url = app.util.appendParamToURL(url, "stateCode", stateCode);
	url = app.util.appendParamToURL(url, "postalCode", postalCode);
	url = app.util.appendParamToURL(url, "city", city);

	return url;
}


/**
 * Make an AJAX request to the server to retrieve the list of applicable shipping methods
 * based on the merchandise in the cart and the currently entered shipping address 
 * (the address may be only partially entered).  If the list of applicable shipping methods 
 * has changed because new address information has been entered, then issue another AJAX 
 * request which updates the currently selected shipping method (if needed) and also updates
 * the UI.  In particular, the list of available shipping methods and the right hand summary
 * must change.
 */
function updateShippingMethodList() {

	var url = getShippingMethodURL("${URLUtils.https('COShipping-GetApplicableShippingMethodsJSON')}");

	var result = app.ajax.getJson({
		url: url,
		callback: function(data) {
			if(!data) {
				alert("Couldn't get list of applicable shipping methods.");
				return false;
			}
			if (shippingMethods != null && shippingMethods.toString() == data.toString())
			{
				// No need to update the UI.  The list has not changed.
				return true;
			}

			// We need to update the UI.  The list has changed.
			// Cache the array of returned shipping methods.
			shippingMethods = data;
	
			url = getShippingMethodURL("${URLUtils.https('COShipping-UpdateShippingMethodList')}");

			// indicate progress
			jQuery("#shippingmethodform").html(app.showProgress());

			// load the shipping method form
			jQuery("#shippingmethodform").load( url, function() {
				jQuery("#shippingmethodform").fadeIn("fast");

				// rebind the radio buttons onclick function to a handler.
				jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.shippingMethodID.htmlName}]").click(function() {
					var selectedMethodID = jQuery(this).val();
					selectShippingMethod(selectedMethodID);
				});

				// activate the tooltips in the newly loaded AJAX section
				app.tooltipDefault();
				
				// update the summary
				updateSummary();
			});
		}
	});
}

// updates the state label depending on the given contry code
// if the flag updateSelection is set to true the state selection
// changes to the first possible select option based on the country
function updateStateLabel(countryCode, updateSelection) {
	var label = "${Resource.msg('forms.state','forms',null)}:";
	if(countryCode == "CA") {
		label = "${Resource.msg('forms.province','forms',null)}:";
	}
	jQuery("div.state > .label > .labeltext").html(label);

	if(updateSelection) {
		var initialOption = "##";
		if(countryCode == "US") {
			initialOption = "";
		} else if(countryCode == "CA") {
			initialOption = "AB";
		}
		changeFormSelection(jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]")[0], initialOption);
	}
}

// updates the options in the states field according to the selection in the country field
function updateStateOptions(countrySelection) {
	var newOptions = null;
	switch (countrySelection) {
	case 'US':
		newOptions = jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.stateUS.htmlName}]").children().clone();
		break;
	case 'CA':
		newOptions = jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.stateCA.htmlName}]").children().clone();
		break;
	case 'DE':
		newOptions = jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.stateDE.htmlName}]").children().clone();
		break;
	default:
		return;
	}
	if (newOptions != null) {
		jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]").children().remove();
		jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]").append(newOptions);
		jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]").attr("disabled", false);
	}
}

jQuery(document).ready(function() {
	// hide the state select elements
	jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.stateUS.htmlName}]").hide();
	jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.stateCA.htmlName}]").hide();
	jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.stateDE.htmlName}]").hide();

	// update the state select options
	var stateSelection = jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]").val();
	updateStateOptions(jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.country.htmlName}]").val());
	changeFormSelection(jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]")[0], stateSelection);

	// select address from list
	jQuery(".addresslist select").change(function() {
		var addressID = jQuery(this).val(),
			address = null;
		
		if (addressID.indexOf("??") > 0) {
			// we have address in the select data attr			
			address = jQuery(this).data("data")[addressID];
		}
		if(!addressID) return false;
		
		updateAddressForm(addressID, address);
		return false;
	}).change();

	// gift message box toggling
	jQuery(".isgiftyes").click(function() { jQuery(".giftmessagetext").show(); });
	jQuery(".isgiftno").click(function() { jQuery(".giftmessagetext").hide(); });

	// gift message character limitation
	initGiftMessageBox();
	jQuery(".giftmessagetext textarea").bind("keyup keydown", function() {
		var max = 250;
		var value = jQuery(this).val();
		var left = max - value.length;
		if(left < 0) {
			jQuery(this).val( value.slice(0, left) );
			left = 0;
		}
		jQuery(".giftmessagetext span.count").text(left);
	});


	// update shipping method list on load
	updateShippingMethodList();

	// bind shipping method selection
	jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.shippingMethodID.htmlName}]").click(function() {
		var selectedMethodID = jQuery(this).val();
		selectShippingMethod(selectedMethodID);
	});

	// update state label upon entering page
	updateStateLabel(jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.country.htmlName}]").val(), false);

	// update state label upon country selection
	jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.country.htmlName}]").change(function() {
		updateStateLabel(jQuery(this).val(), true);
	});

	// update state options in case the country changes
	jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.country.htmlName}]").change(function() {
		updateStateOptions(jQuery(this).val());
	});
	
	// Update shipping method list if country, state, city, or zip changes.
	jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.country.htmlName}]").change(function() {
		updateShippingMethodList();
	});
	jQuery("select[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.states.state.htmlName}]").change(function() {
		updateShippingMethodList();
	});
	jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.city.htmlName}]").change(function() {
		updateShippingMethodList();
	});
	jQuery("input[name=${pdict.CurrentForms.singleshipping.shippingAddress.addressFields.zip.htmlName}]").change(function() {
		updateShippingMethodList();
	});
});

//--></script>

</isdecorate>