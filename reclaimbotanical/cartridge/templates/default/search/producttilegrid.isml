<iscomment> Produces a product listing as a matrix.
  Expects to see productsperrow and productrows in dictionary.
  The value productstoskip has to be set to start with a product later
  in the iterator not with the first one.
  
  Examples:
  producthits		    , an iterator with products to display
  productstoskip 	= 1 , means the first product will be skipped, we start with the second one
  productrows		= 3 , display three product rows
  productsperrow	= 3 , display three products in a row
  
  productprices   = productprices
  category		= current category
  
  Of course, this works only as expected when the number of products is sufficient. In all other cases
  you will see less rows and less products in the last row. </iscomment>
<script type="text/javascript">
/**
 * We use the initCallback callback
 * to assign functionality to the controls
 */
jQuery(document).ready(function() {
    jQuery("#mycarousel").jcarousel({
    scroll: 1,
    initCallback: mycarousel_initCallback,
    buttonNextHTML: null,
    buttonPrevHTML: null
    });
});
function mycarousel_initCallback(carousel) {
 	carousel.options.scroll=1
	var count_totall= jQuery('#mycarousel li.productlisting').size();
	var	count=1	
	jQuery('#count').html('page' + ' '+ count  + ' ' + 'of' + ' ' + count_totall);
    jQuery('#mycarousel-next').bind('click', function() {
	if(count<count_totall){
	count++	
	jQuery('#count').html('page' + ' '+ count  + ' ' + 'of' + ' ' + count_totall);
	}
    carousel.next();
    return false;
    });

    jQuery('#mycarousel-prev').bind('click', function() {
	if(count>1){										  
	 count--	
	jQuery('#count').html('page' + ' '+ count  + ' ' + 'of' + ' ' + count_totall);
	}
    carousel.prev();
    return false;
    });
};
</script>
<iscomment>Check definition in case they are missing</iscomment>
<isif condition="${pdict.productstoskip == null}">
  <isset name="productstoskip" value="${0}" scope="page"/>
  <iselse>
  <isset name="productstoskip" value="${pdict.productstoskip}" scope="page"/>
</isif>
<isif condition="${pdict.productsperrow == null}">
  <isset name="productsperrow" value="${3}" scope="page"/>
  <iselse>
  <isset name="productsperrow" value="${pdict.productsperrow}" scope="page"/>
</isif>
<isif condition="${pdict.productrows == null}">
  <isset name="productrows" value="${3}" scope="page"/>
  <iselse>
  <isset name="productrows" value="${pdict.producthits.size()/productsperrow}" scope="page"/>
</isif>
<iscomment>Counter for product determination</iscomment>
<isset name="templateRowCounter" value="${0}" scope="page"/>
<isset name="templateProductPerRowCounter" value="${0}" scope="page"/>
<isset name="templateClosingMarker" value="${0}" scope="page"/>
<iscomment>0 not set, 1 set</iscomment>
<iscomment>Uses the paging model to identify the product offset. This value is used to with the loop counter to generate the correct start number.</iscomment>
<isif condition="${null != pdict.pagingmodel && !empty(pdict.pagingmodel)}">
	<isset name="startingOffset"  value="${(pdict.pagingmodel.start)}" scope="page"/>
<iselse/>
	<isset name="startingOffset"  value="${0}" scope="page"/>
</isif>
<iscomment>Display the remaining products as list</iscomment>
	<isif condition="${pdict.producthits.size() >4}">
		<div class="jcarousel-scroll"> <a href="#" id="mycarousel-prev">« Prev</a>
		    <div id="count"></div>
		    <a href="#" id="mycarousel-next">Next »</a> 
	    </div>
    </isif>
 <div class="productsDetails">
  <ul id="mycarousel" class="jcarousel-skin-tango">
    <isloop items="${pdict.producthits}" var="LoopProductHit" status="loopstate">
      <isif condition="${loopstate.count > productstoskip}">
        <!-- do we have to start a new row -->
        <isif condition="${templateClosingMarker == 0}">
          <li class="productlisting">
            <isset name="templateClosingMarker" value="${1}" scope="page"/>
        </isif>
        <isset name="Product" value="${LoopProductHit}" scope="page"/>
        <isset name="starting" value="${(loopstate.count + startingOffset)}" scope="page"/>
        <iscomment>display a tile per product</iscomment>
        
        <isinclude template="product/producttiledetailed"/>
        <isset name="templateProductPerRowCounter" value="${templateProductPerRowCounter + 1}" scope="page"/>
        <isif condition="${templateProductPerRowCounter == productsperrow}">
          <iscomment>Yes, we have something to close</iscomment>
          </li>
          <iscomment>Row is done</iscomment>
          <isset name="templateRowCounter" value="${templateRowCounter + 1}" scope="page"/>
          <isset name="templateProductPerRowCounter" value="${0}" scope="page"/>
          <isset name="templateClosingMarker" value="${0}" scope="page"/>
        </isif>
      </isif>
      <isif condition="${templateRowCounter == productrows}">
        <isbreak/>
      </isif>
    </isloop>
  </ul>
  </div>
  
<iscomment>  
<isif condition="${templateClosingMarker == 1}">
  Yes, we have still something to close
  </div>
</isif>
</iscomment>
