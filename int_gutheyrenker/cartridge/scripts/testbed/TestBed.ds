/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input MessageURL : String 
*   @input MessagePath : String 
*   @input MessageBody : String 
*   @input MessageMethod : String 
*   @input ContentType : String 
*   @output SignatureString : String 
*   @output MessageResponse : String
*   @output MessageStatus : String
*   @output MessageRequestHeader : String
*   @output MessageResponseHeaders : dw.util.HashMap
*
*/
importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.web );
importPackage( dw.util );

importPackage( dw.crypto );

function valueOrNull(value) {
	return empty(value) ? null : value;	
}

var value : Number = 10000;

function execute( args : PipelineDictionary ) : Number
{
	var errorText : String = "";
	
	var nonce : String = UUIDUtils.createUUID();
	var timestamp : Number = (new Date().getTime()/1000).toFixed(0);
	var accessID : String = Site.getCurrent().getCustomPreferenceValue("middlewareAPIAccessID");
	var sharedSecret : String = Site.getCurrent().getCustomPreferenceValue("middlewareAPISharedSecret");
	var contentType : String = args.ContentType;
	var methodName : String = args.MessageMethod;
	
	if( empty(contentType) ) {
		contentType = 'application/x-www-form-urlencoded';
	}
	
	if( empty(methodName) ) {
		methodName = "GET";
	}
	
    var url : String = valueOrNull(args.MessageURL) || Site.getCurrent().getCustomPreferenceValue("middlewareAPIURL");
    
    if( !empty(args.MessagePath) ) {
    	url+=args.MessagePath;	
    }
    
    //var url2 = url.replace('50.56.25.161','grws.grdev.com');
 	//1.	First collect the needed parameters
	//2.	Percent-encode the parameters and sort them first by their name and then by their value. 
	//3.	Concatenate the parameters into a string just the way you compute an application/x-www-form-urlencoded string. For this example, the value of this string is gr_access_key_id= AKIAJND7YR3VTASBTW7A&nonce=4d78bb5007f247.66366289&signature_method=HMAC-SHA256&signature_version=1.0&timestamp=1299764225
	//4.	Compute a signature using the shared secret. For this example, the signature is 701a515f4f0242f11d3640f6a28b550d3a421b0f4ff0e6dc2ac5962c791938fb
	//5.	Base64-encode the signature, and then percent-encode the resulting text. 
   
   	var mac : Mac = new Mac(Mac.HMAC_SHA_1); 
   				 
   	var unencodedString = "oauth_consumer_key=" + accessID 
   				+ "&oauth_nonce=" + nonce
   				+ "&oauth_signature_method=HMAC-SHA1"
   				+ "&oauth_timestamp=" + timestamp
   				+ "&oauth_version=1.0";
   				
   	if( contentType=='application/x-www-form-urlencoded' && !empty(args.MessageBody) ) {
   		unencodedString += "&"+args.MessageBody;	
   	}
   				   				
   	var signatureString : String = methodName+"&"+Encoding.toURI(url)+"&"+Encoding.toURI(unencodedString);

   	var msg : Bytes = mac.digest(signatureString, encodeURIComponent(sharedSecret)+"&");
    
   	var outString : String = Encoding.toBase64(msg);
   	outString = Encoding.toURI(outString); 

   	var msgHeaderString : String = "OAuth oauth_consumer_key=\""+ accessID  + "\""
   				+ ", oauth_nonce=\"" + nonce + "\""
				+ ", oauth_signature_method=\"HMAC-SHA1\""
   				+ ", oauth_timestamp=\"" + timestamp + "\""
   				+ ", oauth_version=\"1.0\""
   				+ ", oauth_signature=\"" + outString + "\"";
   				
   	var msgQueryString : String = Encoding.toBase64(mac.digest("POST&http%3A%2F%2Fgrws.grdev.com%2Fvalidator%2F123&oauth_consumer_key%3DAKIAJH5PY7QKS77ZBS4Q%26oauth_nonce%3DvJM5WSSS2HZ%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1314991408%26oauth_version%3D1.0", encodeURIComponent(sharedSecret)+"&"));

   	args.MessageRequestHeader = msgHeaderString;
   	args.SignatureString = signatureString + "|" + msgHeaderString+"|"+msgQueryString;
    if( empty(url) ) {
   		errorText += "<pre>No endpoint URL specified.</pre>";
   	}
    if( empty(args.MessageMethod) ) {
   		errorText += "<pre>No HTTP method specified.</pre>";
   	}
    if( empty(args.MessagePath) ) {
   		errorText += "<pre>No endpoint path specified.</pre>";
   	}
   
   	if( !empty(errorText) ) {
   		args.MessageResponse = errorText;
   		args.MessageResponseHeaders = new HashMap();
   		return PIPELET_NEXT;	
   	}
   
    var httpClient : HTTPClient = new HTTPClient();
    httpClient.setRequestHeader('Content-Type', contentType);
    httpClient.setRequestHeader('Authorization', msgHeaderString);
    httpClient.open(args.MessageMethod, url);
    
    if( !empty(args.MessageBody) ) {
    	httpClient.send(args.MessageBody);
    } else {
    	httpClient.send();
    }
    
	args.MessageResponse = httpClient.getText();
	if( empty(args.MessageResponse) && 'errorText' in httpClient && !empty(httpClient['errorText']) ) {
		args.MessageResponse = httpClient['errorText'];
	}
	args.MessageStatus = httpClient.getStatusCode()+" "+httpClient.getStatusMessage();
	args.MessageResponseHeaders = httpClient.getAllResponseHeaders();

    return PIPELET_NEXT;
}
