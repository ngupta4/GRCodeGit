/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input InMessage : String
*   @output OutMessage : String
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.crypto );
importPackage( dw.io );

var log : Log = Logger.getLogger("libCrypt.ds");

function encryptOrderFile( path : String, style : String ) : String {
	if( style != 'double' ) {
		return encryptFile( path, 245 );
	} else {
		return encryptFile( path, 117 );	
	}
}

function encryptFile( exportFile : String, BLOCK_SIZE : Number ) {
	var cryptKey : String = Site.getCurrent().getCustomPreferenceValue("grFileEncryptionKey");
	var cryptType : String = Site.getCurrent().getCustomPreferenceValue("grEncryptionType");
	var cipher : Cipher = new Cipher();
	
	var tmpExportFile : String = exportFile+".tmp";
	var tmpExportFilePath : String = File.IMPEX + File.SEPARATOR +"src"+ File.SEPARATOR + tmpExportFile;
	var readFile : File = new File(File.IMPEX + File.SEPARATOR +"src"+ File.SEPARATOR + exportFile);
	var tmpFile : File = new File(tmpExportFilePath);
		
	var buffer : Bytes = null;
	var encryptBuffer : String = null;
	
	var done : boolean = false;
	
	var reader : RandomAccessFileReader = new RandomAccessFileReader(readFile);
	var writer : FileWriter = new FileWriter(tmpFile,"UTF-8");
	
	var tempString : String = null;
	
		while( !done ) {
		try{
			/** Throw error  java.lang.StringIndexOutOfBoundsException: String index out of range: -1**/
			buffer = reader.readBytes(BLOCK_SIZE);
		}catch(e){
			//buffer = reader.read();
		}
		if( empty(buffer) ) {
			done = true;
		} else {
			//log.debug("Un-encrypted string="+buffer);
			var encryptedBytes : Bytes = cipher.encryptBytes(buffer, cryptKey, cryptType, "", 0);
			tempString = Encoding.toBase64(encryptedBytes);
			
			//log.debug("Encrypted String: \"{0}\"",tempString);
			/*try{
				log.debug("Decrypted String: \"{0}\"",(cipher.decryptBytes(Encoding.fromBase64(tempString), getPrivateKey(), cryptType, "", 0)).toString("UTF-8"));
			}catch(e) {
				log.debug(e);
			}*/
			//encryptBuffer = Encoding.toBase64(new Bytes(tempString, "UTF-8"));
			//log.debug("Base64 String: \"{0}\"",encryptBuffer);
			
			writer.write(tempString);		
		}
	}
	
	writer.flush();
	writer.close();
	reader.close();
	
	readFile.remove();
	tmpFile.renameTo(readFile);
}
function encryptTest() {
	
	var cryptKey : String = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA87aBiNKzaIudFs9oHjA+26d1bPgdxOj2I9l12CI7/2GY//hhrtKh8BbVgS0Ym0fho4TCI2N1moHttp0XTKtMYmFrPFZcwGKteQc0/yXIHgsdbq5ySSTa0HV87sajeUvT28MEn2FmwC0jh5WkcOwjwyWCon6I+Kch1Mek8E+482/JEcGf6bOvsvHCcs0v8bfK+tlRg4zLGbBebgPiU10WnYeXPTyd+51IaXFrgNOcaQdgp5hhI5oI6B3ykmVQd9bTO/J/kjB8C+hxvqvQX5++G8ebB5Fppjf8QyJ36mYvA1MVAnTtAZbnb3IQXXGWwEJEF3ToULCAq12j85RvemDYxQIDAQAB";
	var cryptType : String = "RSA";
	var cipher : Cipher = new Cipher();
	
	var test1 = cipher.encrypt("<hellowroldtest />LÃ³pez", cryptKey, cryptType, "", 0);
	var test2 = Encoding.toBase64(new Bytes(cipher.encrypt("<hellowroldtest \/>", cryptKey, cryptType, "", 0),"UTF-8"));
	
	return test1;
}


// Optional order file archival
function archiveOrderFile( pathToArchive : String ) {
//	var file : File = new File( File.IMPEX, pathToArchive );
//	var dirs : File = new File( File.IMPEX, "/src/orders/archives/" );
	
	// Create directories, if necessary
//	dirs.mkdirs();
	
	// Archive zipped, but unencrypted order file
//	var zippedFile : File = new File( File.IMPEX, "/src/orders/archives/"+file.name+".zip" );
//	file.zip( zippedFile );

	return null;
}

function encryptHigh( inString : String ) {
	var cipher = new Cipher();
	var msg = "", part = "";
	var index=0, times = inString.length/245;
	while( index < times ) {
		part = inString.substring(index*245, (index+1)*245);
		msg+=cipher.encrypt(inString.substring(index*245, (index+1)*245),
		"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", 
		"ELG-E", "", 0 );
		index++;
	}
		
	return msg;
}

function encryptLow( inString : String ) {
	var cipher : Cipher = new Cipher();

	var msg : String = "", part = "";
	var index=0, times = inString.length/117;
	while( index < times ) {
		part = inString.substring(index*117, (index+1)*117);
		//msg = msg.replace("=","","g");
		msg+=cipher.encrypt(inString.substring(index*117, (index+1)*117),
		"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA87aBiNKzaIudFs9oHjA+26d1bPgdxOj2I9l12CI7/2GY//hhrtKh8BbVgS0Ym0fho4TCI2N1moHttp0XTKtMYmFrPFZcwGKteQc0/yXIHgsdbq5ySSTa0HV87sajeUvT28MEn2FmwC0jh5WkcOwjwyWCon6I+Kch1Mek8E+482/JEcGf6bOvsvHCcs0v8bfK+tlRg4zLGbBebgPiU10WnYeXPTyd+51IaXFrgNOcaQdgp5hhI5oI6B3ykmVQd9bTO/J/kjB8C+hxvqvQX5++G8ebB5Fppjf8QyJ36mYvA1MVAnTtAZbnb3IQXXGWwEJEF3ToULCAq12j85RvemDYxQIDAQAB", 
		"RSA", null, 0 );
		index++;
	}
		
	return msg;
}

function decrypt( inString : String ) {
	var cipher = new Cipher();
	var msg = "", part = "";
	var index=0, times = inString.length/128;
	while( index < times ) {
		part = inString.substring(index*128, (index+1)*128);
		msg+=cipher.decrypt(part,
		"<insert private key here>", 
		"RSA", "", 0 );
		index++;
	}
	return msg;
}

function testEncryption() : String {
	var orderNumber : String = "000256000256000";
	var inXML : XML = new XML("<order><title>Hello World</title><title>Hello World</title><title>Hello World</title><title>Hello World</title><title>Hello World</title><title>Hello World</title><title>Hello World</title><order_no>"+orderNumber+"</order_no></order>");
	var test = encryptLow(inXML.toXMLString());
	
	var out1 = "5G67O5pL5+rkJQUmlgrRymlFwvbuEy1tcaWU6RvT6ppP2c17B7mHLK8x4MMrlD/WGuxsRxM3qGl7rlv5ZZnVvxH0jkltBNrmROZuSvB+/zEo3/IJ1uBE/MawVN97pNALgEtg6lriSGp1UoknnV2wavtTkIZA20bBaO1CVTUIYvyPfFhKym4hec7oqdq2OrfYoGm68R4ZTo8PLGuQKiMW2v9hckvr+COXPbzFCVe17nLalCtKzdYUCZ3Q76dsXr5E2Bm5B/ONmViy/hcxCHhxmk6cbZWZc4NYt8tMOTOQvrUosgLaNX9O2XATFXm8UtgaU9FAi+eUIrnmxGSH6uEkFQ==";
	
	return out1.length;
}