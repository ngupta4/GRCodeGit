/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Request : dw.system.Request
*   @input sourceId : String
*   @input ipAddress : String
*   @input incomingUci : String
*   @input uci : String
*   @input action : String
*   @input screen : String
*   @input element : String
*   @input currentSessionId :String  //CurrentSession.sessionID
*   @input mwid : String
*   @input accountNum : String
*	@output response : String
*	@output status : Number
*	@output statusMessage : String
*	@output datetime : String
*
*/
importPackage( dw.system );
importPackage( dw.io );
importPackage( dw.net );
importPackage( dw.util );
importPackage( dw.web );
importPackage( dw.crypto );
importPackage(dw.object);
importScript( "grmiddleware/libGRMiddleware.ds" );
importScript("common/libUtils.ds");

function execute(args: PipelineDictionary): Number {
    
	var error = null;
	var landingdate = StringUtils.formatDate(DateUtils.nowForSite(),"yyyy-MM-dd'T'HH:mm:ss");
	
	// Figure out service URL
	var serviceURL : String = getDiagnosticActionURL();
		
	//Get UID
	var request:Request = args.Request;
	var uid:String = getCustomerUID(request);
	
   	var brand = Site.current.getCustomPreferenceValue("GRMProductLine");
  	var mwid= args.mwid;
  	var sessionId=args.currentSessionId;
  	
	var xmlWriter : StringWriter = new StringWriter();
	createDiagnosticActionXML(xmlWriter , args.sourceId, brand, sessionId, uid , args.ipAddress , mwid, args.accountNum, args.incomingUci, args.uci,args.action ,args.screen ,args.element,landingdate);
	var diagActionXML: String = xmlWriter.toString();
	
	
   //Diagnostic Action---Web service call
   
   	 // Call GR Service
	var http : HTTPClient = new HTTPClient();
    try {
	    http.setRequestHeader('Content-Type','text/xml');
	   // http.setRequestHeader('Authorization',oauthHeader);
	    logDebug ("Diagnostic Action URL :"+serviceURL);
	    //http.open('POST', serviceURL);
	    logDebug ("Diagnostic Action XML =" + diagActionXML);
	    http = callMWAPI(http, "POST", serviceURL, diagActionXML ); 
	}
	catch (e)
	{
		Logger.error(e);
	}

	var error = null;
	var status = http.statusCode;
	var statusMessage:String=http.statusMessage;
	// Capture response
	
	var response : String = http.text;
	var errorResponse : String = http.errorText;
	
	logInfo("Diagnostic Action API response = "+ response);
	logInfo("Diagnostic Action API errorResponse = "+ errorResponse);	

	/****
	* Handle error responses
	* Empty response (no XML) or non-empty error response
	****/
	
	if( !empty(errorResponse) ) {
		response = errorResponse;
	}
	
	args.response = response;
	args.statusMessage = statusMessage;        
    args.status = status;
    args.datetime=landingdate;
    
    return PIPELET_NEXT;
}

function getDiagnosticActionURL() {
	var baseURL : String = Site.current.getCustomPreferenceValue("DiagnosticToolActionLog");
	baseURL=baseURL+"/logs/diagnostic.php";
	return baseURL;
}


function createDiagnosticActionXML (xmlWriter : Writer, sourceId:String, brand:String, sessionId:String, uid : String, ipAddress : String, mwid:String, accountNum:String, incomingUci:String, uci:String,action:String ,screen:String ,element:String,landingDate:String) {
                       //            createDiagnosticActionXML( args.ipAddress , mwid, ------args.incomingUci, args.uci,args.action ,args.screen ,args.element,args.landingDate);
	// Write XML header to file
	xmlWriter.write('<?xml version="1.0" encoding="UTF-8"?> \n');
	xmlWriter.write('<dignosticLog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="DiagnosticActionLogRequest_0-1.xsd"> \n');
	xmlWriter.write('	<action>\n');
	xmlWriter.write('		<sourceId><![CDATA['+sourceId+']]></sourceId>\n');
	xmlWriter.write('		<brand><![CDATA['+brand+']]></brand>\n');
	xmlWriter.write('		<sessionId><![CDATA['+sessionId+']]></sessionId>\n');
	xmlWriter.write('		<uid><![CDATA['+uid+']]></uid>\n');
	xmlWriter.write('		<ipAddress><![CDATA['+ipAddress+']]></ipAddress>\n');
	xmlWriter.write('		<mwid><![CDATA['+mwid+']]></mwid>\n');
	xmlWriter.write('		<accountNum><![CDATA['+accountNum+']]></accountNum>\n');
	xmlWriter.write('		<incomingUci><![CDATA['+incomingUci+']]></incomingUci>\n');
	xmlWriter.write('		<uci><![CDATA['+uci+']]></uci>\n');
	xmlWriter.write('		<action><![CDATA['+action+']]></action>\n');
	xmlWriter.write('		<screen><![CDATA['+screen+']]></screen>\n');
	xmlWriter.write('		<element><![CDATA['+element+']]></element>\n');
	xmlWriter.write('		<landingDate><![CDATA['+landingDate+']]></landingDate>\n');	
	xmlWriter.write('	</action>\n');	
	xmlWriter.write('</dignosticLog>\n');
}

