/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Request : dw.system.Request
*   @input mwid : String
*   @input contInfoObj : Object
*	@output statusMessage : String
*   @output ErrorContainer : Array
*   @output orderList: dw.util.Iterator
*   @output continuityObj : Object
*
*/
importPackage( dw.system );
importPackage( dw.io );
importPackage( dw.net );
importPackage( dw.util );
importPackage( dw.web );
importPackage( dw.crypto );
importPackage(dw.object);
importScript( "grmiddleware/libGRMiddleware.ds" );
importScript("common/libUtils.ds");
importScript("guthyrenker_businesslogic:account/Utils.ds");

function execute(args: PipelineDictionary): Number {
    
    //Copy the object contInfoObj which is output of continuityInfo.ds to continuityObj 
 	args.continuityObj=args.contInfoObj;
   
   	// No XML which the serviceneeds to consume
	
	var errorContainer : Array = [];
	var error = null;
	
	// Figure out service URL
	//Get UID
	var request:Request = args.Request;
	var uid:String = getCustomerUID(request);
  	var transactionID = getTransactionID();
  	var brand=Site.current.getCustomPreferenceValue("GRMProductLine");
  	var mwid= args.mwid;
	var serviceURL : String = getOrderHistoryServiceURL(mwid, brand, uid,transactionID);
	
   //Order history---Web service call
   
   	 // Call GR Service
	var http : HTTPClient = new HTTPClient();
    try {
	    http.setRequestHeader('Content-Type','text/xml');
	   // http.setRequestHeader('Authorization',oauthHeader);
	    logDebug ("Order History URL :"+serviceURL);
	    //http.open('POST', serviceURL);
	    // logDebug ("Shipping Freq XML =" + shippFreqXML);
	    // Send XML data
	    //  http.send(shippFreqXML);
	    http = callMWAPI(http, "GET", serviceURL); 
	}
	catch (e)
	{
		Logger.error(e);
	}

	var responseXML : XML = null;
	var errorContainer : Array = [];
	var error = null;
	var status:String=null;
	// Capture response
	
	var response : String = http.text;
	var errorResponse : String = http.errorText;
	
	logInfo("Order History API response = "+ response);
	logInfo("Order History API errorResponse = "+ errorResponse);	

	/****
	* Handle error responses
	* Empty response (no XML) or non-empty error response
	****/
	
	if( !empty(errorResponse) ) {
		response = errorResponse;
	}
	
	if( !empty(response) ) {		
       //  response= response.replace("&", "&amp;");
		var realStart : Number = response.indexOf('<customerResponse>');
	   
	    responseXML = new XML(response.substring(realStart));
	 
	   // responseXML=new XML(response);
	    
	    var ns: Namespace = new Namespace(responseXML.namespace());
	    //responseXML=responseXML.ns::customerResponse;
	    var orders: ArrayList =null;
	    
	 
        status = responseXML.status.toString();
	    if(status == 200){
		  	//parse response
			   orders = new dw.util.ArrayList();
		       for each(var orderXML: XML in responseXML.ns::responseData.ns::orders.ns::order) {
		         	var order: Object= new Object();
		         	var products: ArrayList = new dw.util.ArrayList();
		         	var prodCount=0;
			        for each(var prodXML: XML in orderXML.ns::products.ns::product) {
			            var prod: Object= new Object();
						var prodOBJ: Product= getProductUPC(prodXML.ns ::productNum.toString());
						prod['productNum']=prodXML.ns ::productNum.toString();
						var prodId=0;
						if(null!=prodOBJ)
						{  prodId=prodOBJ.ID;
						}
						prod['prodId']=prodId;
						prod['quantity'] = prodXML.ns ::quantity.toString();
						prod['price'] = prodXML.ns ::price.toString();
						prod['title'] = prodXML.ns ::title.toString();
						prod['status'] = prodXML.ns ::status.toString();
						var statustempDate : String= prodXML.ns ::statusDate.toString(); 
						var d: Date = new Date(statustempDate);
						prod['statusDate'] =d.toLocaleDateString(); //prodXML.ns ::statusDate.toString();
						
						var ordertempDate : String= prodXML.ns ::orderDate.toString(); 
						var d1: Date = new Date(ordertempDate);
						prod['orderDate'] =d1.toLocaleDateString();// prodXML.ns ::orderDate.toString();
						prod['linkId'] = prodXML.ns ::linkId.toString();
						order['id']= prodXML.ns ::linkId.toString();
			            prodCount=prodCount+1;
			            products.add(prod);
			         }
			     order['products']=products;
			     order['productCount']=prodCount;
			     orders.add(order);
		         args.orderList = orders.iterator();
		        } 
		}else 
			{  getErrorResponse (responseXML);//Call for error handling
		 
		 /*	var errorcode = responseXML.errorData.error.errorCode;
			var errormsg = responseXML.errorData.error.errorMessage;
			error = {	"code":errorcode,
						"message":errormsg						
					};
			errorContainer.push(error);*/
		  } 
     }																
  
   //empty list case
   // orders =new dw.util.ArrayList();
    //empty list case--end
     
    
    
    args.statusMessage = status;
	args.ErrorContainer=errorContainer;
    return PIPELET_NEXT;
}

function getOrderHistoryServiceURL(mwid : String, brand : String, uid : String, trans: String, asyncFlag:Boolean) {
   //baseURL="https://mw-web-dev3.grdev.com/customer/order-history/mwid/15/brand/PA/uid/VHgNyZ/trans/12233445514";
	var baseURL : String = Site.current.getCustomPreferenceValue("middlewareAPIURL");
	baseURL=baseURL+"/customer/order-history/mwid/"+ mwid +"/brand/"+ brand+"/uid/"+ uid +"/trans/"+trans;
	//baseURL="https://mw-web-dev3.grdev.com/customer/order-history/mwid/15/brand/PA/uid/VHgNyZ/trans/12233445514";
	return baseURL;
}
